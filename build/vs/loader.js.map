{"version":3,"sources":["fake","vs/loader.js","vs/css.js","vs/nls.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxefile":"vs/loader.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.3.1(undefined)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/*---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n// Limitation: To load jquery through the loader, always require 'jquery' and add a path for it in the loader configuration\r\nvar _amdLoaderGlobal = this, define;\r\nvar AMDLoader;\r\n(function (AMDLoader) {\r\n    // ------------------------------------------------------------------------\r\n    // Utilities\r\n    function _isWindows() {\r\n        if (typeof navigator !== 'undefined') {\r\n            if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\r\n                return true;\r\n            }\r\n        }\r\n        if (typeof process !== 'undefined') {\r\n            return (process.platform === 'win32');\r\n        }\r\n        return false;\r\n    }\r\n    var isWindows = _isWindows();\r\n    var Utilities = (function () {\r\n        function Utilities() {\r\n        }\r\n        /**\r\n         * This method does not take care of / vs \\\r\n         */\r\n        Utilities.fileUriToFilePath = function (uri) {\r\n            uri = decodeURI(uri);\r\n            if (isWindows) {\r\n                if (/^file:\\/\\/\\//.test(uri)) {\r\n                    // This is a URI without a hostname => return only the path segment\r\n                    return uri.substr(8);\r\n                }\r\n                if (/^file:\\/\\//.test(uri)) {\r\n                    return uri.substr(5);\r\n                }\r\n            }\r\n            else {\r\n                if (/^file:\\/\\//.test(uri)) {\r\n                    return uri.substr(7);\r\n                }\r\n            }\r\n            // Not sure...\r\n            return uri;\r\n        };\r\n        Utilities.startsWith = function (haystack, needle) {\r\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\r\n        };\r\n        Utilities.endsWith = function (haystack, needle) {\r\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\r\n        };\r\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\r\n        Utilities.containsQueryString = function (url) {\r\n            return /^[^\\#]*\\?/gi.test(url);\r\n        };\r\n        /**\r\n         * Does `url` start with http:// or https:// or / ?\r\n         */\r\n        Utilities.isAbsolutePath = function (url) {\r\n            return (Utilities.startsWith(url, 'http://')\r\n                || Utilities.startsWith(url, 'https://')\r\n                || Utilities.startsWith(url, 'file://')\r\n                || Utilities.startsWith(url, '/'));\r\n        };\r\n        Utilities.forEachProperty = function (obj, callback) {\r\n            if (obj) {\r\n                var key;\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        callback(key, obj[key]);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        Utilities.isEmpty = function (obj) {\r\n            var isEmpty = true;\r\n            Utilities.forEachProperty(obj, function () {\r\n                isEmpty = false;\r\n            });\r\n            return isEmpty;\r\n        };\r\n        Utilities.isArray = function (obj) {\r\n            if (Array.isArray) {\r\n                return Array.isArray(obj);\r\n            }\r\n            return Object.prototype.toString.call(obj) === '[object Array]';\r\n        };\r\n        Utilities.recursiveClone = function (obj) {\r\n            if (!obj || typeof obj !== 'object') {\r\n                return obj;\r\n            }\r\n            var result = Utilities.isArray(obj) ? [] : {};\r\n            Utilities.forEachProperty(obj, function (key, value) {\r\n                if (value && typeof value === 'object') {\r\n                    result[key] = Utilities.recursiveClone(value);\r\n                }\r\n                else {\r\n                    result[key] = value;\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n        Utilities.generateAnonymousModule = function () {\r\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\r\n        };\r\n        Utilities.isAnonymousModule = function (id) {\r\n            return id.indexOf('===anonymous') === 0;\r\n        };\r\n        Utilities.NEXT_ANONYMOUS_ID = 1;\r\n        return Utilities;\r\n    }());\r\n    AMDLoader.Utilities = Utilities;\r\n    var ConfigurationOptionsUtil = (function () {\r\n        function ConfigurationOptionsUtil() {\r\n        }\r\n        /**\r\n         * Ensure configuration options make sense\r\n         */\r\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (options) {\r\n            function defaultOnError(err) {\r\n                if (err.errorCode === 'load') {\r\n                    console.error('Loading \"' + err.moduleId + '\" failed');\r\n                    console.error('Detail: ', err.detail);\r\n                    if (err.detail && err.detail.stack) {\r\n                        console.error(err.detail.stack);\r\n                    }\r\n                    console.error('Here are the modules that depend on it:');\r\n                    console.error(err.neededBy);\r\n                    return;\r\n                }\r\n                if (err.errorCode === 'factory') {\r\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\r\n                    console.error(err.detail);\r\n                    if (err.detail && err.detail.stack) {\r\n                        console.error(err.detail.stack);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            options = options || {};\r\n            if (typeof options.baseUrl !== 'string') {\r\n                options.baseUrl = '';\r\n            }\r\n            if (typeof options.isBuild !== 'boolean') {\r\n                options.isBuild = false;\r\n            }\r\n            if (typeof options.paths !== 'object') {\r\n                options.paths = {};\r\n            }\r\n            if (typeof options.bundles !== 'object') {\r\n                options.bundles = [];\r\n            }\r\n            if (typeof options.shim !== 'object') {\r\n                options.shim = {};\r\n            }\r\n            if (typeof options.config !== 'object') {\r\n                options.config = {};\r\n            }\r\n            if (typeof options.catchError === 'undefined') {\r\n                // Catch errors by default in web workers, do not catch errors by default in other contexts\r\n                options.catchError = isWebWorker;\r\n            }\r\n            if (typeof options.urlArgs !== 'string') {\r\n                options.urlArgs = '';\r\n            }\r\n            if (typeof options.onError !== 'function') {\r\n                options.onError = defaultOnError;\r\n            }\r\n            if (typeof options.ignoreDuplicateModules !== 'object' || !Utilities.isArray(options.ignoreDuplicateModules)) {\r\n                options.ignoreDuplicateModules = [];\r\n            }\r\n            if (options.baseUrl.length > 0) {\r\n                if (!Utilities.endsWith(options.baseUrl, '/')) {\r\n                    options.baseUrl += '/';\r\n                }\r\n            }\r\n            if (!Array.isArray(options.nodeModules)) {\r\n                options.nodeModules = [];\r\n            }\r\n            return options;\r\n        };\r\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (overwrite, base) {\r\n            if (overwrite === void 0) { overwrite = null; }\r\n            if (base === void 0) { base = null; }\r\n            var result = Utilities.recursiveClone(base || {});\r\n            // Merge known properties and overwrite the unknown ones\r\n            Utilities.forEachProperty(overwrite, function (key, value) {\r\n                if (key === 'bundles' && typeof result.bundles !== 'undefined') {\r\n                    if (Utilities.isArray(value)) {\r\n                        // Compatibility style\r\n                        result.bundles = result.bundles.concat(value);\r\n                    }\r\n                    else {\r\n                        // AMD API style\r\n                        Utilities.forEachProperty(value, function (key, value) {\r\n                            var bundleConfiguration = {\r\n                                location: key,\r\n                                modules: value\r\n                            };\r\n                            result.bundles.push(bundleConfiguration);\r\n                        });\r\n                    }\r\n                }\r\n                else if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\r\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\r\n                }\r\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\r\n                    Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\r\n                }\r\n                else if (key === 'shim' && typeof result.shim !== 'undefined') {\r\n                    Utilities.forEachProperty(value, function (key2, value2) { return result.shim[key2] = value2; });\r\n                }\r\n                else if (key === 'config' && typeof result.config !== 'undefined') {\r\n                    Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\r\n                }\r\n                else {\r\n                    result[key] = Utilities.recursiveClone(value);\r\n                }\r\n            });\r\n            return ConfigurationOptionsUtil.validateConfigurationOptions(result);\r\n        };\r\n        return ConfigurationOptionsUtil;\r\n    }());\r\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\r\n    var Configuration = (function () {\r\n        function Configuration(options) {\r\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(options);\r\n            this._createIgnoreDuplicateModulesMap();\r\n            this._createSortedPathsRules();\r\n            this._createShimModules();\r\n            this._createOverwriteModuleIdToPath();\r\n            if (this.options.baseUrl === '') {\r\n                if (isNode && this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename) {\r\n                    var nodeMain = this.options.nodeRequire.main.filename;\r\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\r\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\r\n                }\r\n                if (isNode && this.options.nodeMain) {\r\n                    var nodeMain = this.options.nodeMain;\r\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\r\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\r\n                }\r\n            }\r\n        }\r\n        Configuration.prototype._createOverwriteModuleIdToPath = function () {\r\n            this.overwriteModuleIdToPath = {};\r\n            for (var i = 0; i < this.options.bundles.length; i++) {\r\n                var bundle = this.options.bundles[i];\r\n                var location = bundle.location;\r\n                if (bundle.modules) {\r\n                    for (var j = 0; j < bundle.modules.length; j++) {\r\n                        this.overwriteModuleIdToPath[bundle.modules[j]] = location;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\r\n            // Build a map out of the ignoreDuplicateModules array\r\n            this.ignoreDuplicateModulesMap = {};\r\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\r\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\r\n            }\r\n        };\r\n        Configuration.prototype._createSortedPathsRules = function () {\r\n            var _this = this;\r\n            // Create an array our of the paths rules, sorted descending by length to\r\n            // result in a more specific -> less specific order\r\n            this.sortedPathsRules = [];\r\n            Utilities.forEachProperty(this.options.paths, function (from, to) {\r\n                if (!Utilities.isArray(to)) {\r\n                    _this.sortedPathsRules.push({\r\n                        from: from,\r\n                        to: [to]\r\n                    });\r\n                }\r\n                else {\r\n                    _this.sortedPathsRules.push({\r\n                        from: from,\r\n                        to: to\r\n                    });\r\n                }\r\n            });\r\n            this.sortedPathsRules.sort(function (a, b) {\r\n                return b.from.length - a.from.length;\r\n            });\r\n        };\r\n        Configuration.prototype._ensureShimModule1 = function (path, shimMD) {\r\n            // Ensure dependencies are also shimmed\r\n            for (var i = 0; i < shimMD.length; i++) {\r\n                var dependencyId = shimMD[i];\r\n                if (!this.shimModules.hasOwnProperty(dependencyId)) {\r\n                    this._ensureShimModule1(dependencyId, []);\r\n                }\r\n            }\r\n            this.shimModules[path] = {\r\n                stack: null,\r\n                dependencies: shimMD,\r\n                callback: null\r\n            };\r\n            if (this.options.isBuild) {\r\n                this.shimModulesStr[path] = 'null';\r\n            }\r\n        };\r\n        Configuration.prototype._ensureShimModule2 = function (path, shimMD) {\r\n            this.shimModules[path] = {\r\n                stack: null,\r\n                dependencies: shimMD.deps || [],\r\n                callback: function () {\r\n                    var depsValues = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        depsValues[_i - 0] = arguments[_i];\r\n                    }\r\n                    if (typeof shimMD.init === 'function') {\r\n                        var initReturnValue = shimMD.init.apply(global, depsValues);\r\n                        if (typeof initReturnValue !== 'undefined') {\r\n                            return initReturnValue;\r\n                        }\r\n                    }\r\n                    if (typeof shimMD.exports === 'function') {\r\n                        return shimMD.exports.apply(global, depsValues);\r\n                    }\r\n                    if (typeof shimMD.exports === 'string') {\r\n                        var pieces = shimMD.exports.split('.');\r\n                        var obj = global;\r\n                        for (var i = 0; i < pieces.length; i++) {\r\n                            if (obj) {\r\n                                obj = obj[pieces[i]];\r\n                            }\r\n                        }\r\n                        return obj;\r\n                    }\r\n                    return shimMD.exports || {};\r\n                }\r\n            };\r\n            if (this.options.isBuild) {\r\n                if (typeof shimMD.init === 'function') {\r\n                    this.shimModulesStr[path] = shimMD.init.toString();\r\n                }\r\n                else if (typeof shimMD.exports === 'function') {\r\n                    this.shimModulesStr[path] = shimMD.exports.toString();\r\n                }\r\n                else if (typeof shimMD.exports === 'string') {\r\n                    this.shimModulesStr[path] = 'function() { return this.' + shimMD.exports + '; }';\r\n                }\r\n                else {\r\n                    this.shimModulesStr[path] = JSON.stringify(shimMD.exports);\r\n                }\r\n            }\r\n        };\r\n        Configuration.prototype._createShimModules = function () {\r\n            var _this = this;\r\n            this.shimModules = {};\r\n            this.shimModulesStr = {};\r\n            Utilities.forEachProperty(this.options.shim, function (path, shimMD) {\r\n                if (!shimMD) {\r\n                    return;\r\n                }\r\n                if (Utilities.isArray(shimMD)) {\r\n                    _this._ensureShimModule1(path, shimMD);\r\n                    return;\r\n                }\r\n                _this._ensureShimModule2(path, shimMD);\r\n            });\r\n        };\r\n        /**\r\n         * Clone current configuration and overwrite options selectively.\r\n         * @param options The selective options to overwrite with.\r\n         * @result A new configuration\r\n         */\r\n        Configuration.prototype.cloneAndMerge = function (options) {\r\n            return new Configuration(ConfigurationOptionsUtil.mergeConfigurationOptions(options, this.options));\r\n        };\r\n        /**\r\n         * Get current options bag. Useful for passing it forward to plugins.\r\n         */\r\n        Configuration.prototype.getOptionsLiteral = function () {\r\n            return this.options;\r\n        };\r\n        Configuration.prototype._applyPaths = function (moduleId) {\r\n            var pathRule;\r\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\r\n                pathRule = this.sortedPathsRules[i];\r\n                if (Utilities.startsWith(moduleId, pathRule.from)) {\r\n                    var result = [];\r\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\r\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\r\n                    }\r\n                    return result;\r\n                }\r\n            }\r\n            return [moduleId];\r\n        };\r\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\r\n            if (Utilities.containsQueryString(url)) {\r\n                return url + '&' + this.options.urlArgs;\r\n            }\r\n            else {\r\n                return url + '?' + this.options.urlArgs;\r\n            }\r\n        };\r\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\r\n            if (this.options.urlArgs) {\r\n                return this._addUrlArgsToUrl(url);\r\n            }\r\n            return url;\r\n        };\r\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\r\n            if (this.options.urlArgs) {\r\n                for (var i = 0, len = urls.length; i < len; i++) {\r\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\r\n                }\r\n            }\r\n            return urls;\r\n        };\r\n        /**\r\n         * Transform a module id to a location. Appends .js to module ids\r\n         */\r\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\r\n            if (this.isBuild() && this.options.nodeModules.indexOf(moduleId) >= 0) {\r\n                // This is a node module and we are at build time, drop it\r\n                return ['empty:'];\r\n            }\r\n            var result = moduleId;\r\n            if (this.overwriteModuleIdToPath.hasOwnProperty(result)) {\r\n                result = this.overwriteModuleIdToPath[result];\r\n            }\r\n            var results;\r\n            if (!Utilities.endsWith(result, '.js') && !Utilities.isAbsolutePath(result)) {\r\n                results = this._applyPaths(result);\r\n                for (var i = 0, len = results.length; i < len; i++) {\r\n                    if (this.isBuild() && results[i] === 'empty:') {\r\n                        continue;\r\n                    }\r\n                    if (!Utilities.isAbsolutePath(results[i])) {\r\n                        results[i] = this.options.baseUrl + results[i];\r\n                    }\r\n                    if (!Utilities.endsWith(results[i], '.js') && !Utilities.containsQueryString(results[i])) {\r\n                        results[i] = results[i] + '.js';\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (!Utilities.endsWith(result, '.js') && !Utilities.containsQueryString(result)) {\r\n                    result = result + '.js';\r\n                }\r\n                results = [result];\r\n            }\r\n            return this._addUrlArgsIfNecessaryToUrls(results);\r\n        };\r\n        /**\r\n         * Transform a module id or url to a location.\r\n         */\r\n        Configuration.prototype.requireToUrl = function (url) {\r\n            var result = url;\r\n            if (!Utilities.isAbsolutePath(result)) {\r\n                result = this._applyPaths(result)[0];\r\n                if (!Utilities.isAbsolutePath(result)) {\r\n                    result = this.options.baseUrl + result;\r\n                }\r\n            }\r\n            return this._addUrlArgsIfNecessaryToUrl(result);\r\n        };\r\n        /**\r\n         * Test if `moduleId` is shimmed.\r\n         */\r\n        Configuration.prototype.isShimmed = function (moduleId) {\r\n            return this.shimModules.hasOwnProperty(moduleId);\r\n        };\r\n        /**\r\n         * Flag to indicate if current execution is as part of a build.\r\n         */\r\n        Configuration.prototype.isBuild = function () {\r\n            return this.options.isBuild;\r\n        };\r\n        /**\r\n         * Get a normalized shim definition for `moduleId`.\r\n         */\r\n        Configuration.prototype.getShimmedModuleDefine = function (moduleId) {\r\n            return this.shimModules[moduleId];\r\n        };\r\n        Configuration.prototype.getShimmedModulesStr = function (moduleId) {\r\n            return this.shimModulesStr[moduleId];\r\n        };\r\n        /**\r\n         * Test if module `moduleId` is expected to be defined multiple times\r\n         */\r\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\r\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\r\n        };\r\n        /**\r\n         * Get the configuration settings for the provided module id\r\n         */\r\n        Configuration.prototype.getConfigForModule = function (moduleId) {\r\n            if (this.options.config) {\r\n                return this.options.config[moduleId];\r\n            }\r\n        };\r\n        /**\r\n         * Should errors be caught when executing module factories?\r\n         */\r\n        Configuration.prototype.shouldCatchError = function () {\r\n            return this.options.catchError;\r\n        };\r\n        /**\r\n         * Should statistics be recorded?\r\n         */\r\n        Configuration.prototype.shouldRecordStats = function () {\r\n            return this.options.recordStats;\r\n        };\r\n        /**\r\n         * Forward an error to the error handler.\r\n         */\r\n        Configuration.prototype.onError = function (err) {\r\n            this.options.onError(err);\r\n        };\r\n        return Configuration;\r\n    }());\r\n    AMDLoader.Configuration = Configuration;\r\n    // ------------------------------------------------------------------------\r\n    // ModuleIdResolver\r\n    var ModuleIdResolver = (function () {\r\n        function ModuleIdResolver(config, fromModuleId) {\r\n            this._config = config;\r\n            var lastSlash = fromModuleId.lastIndexOf('/');\r\n            if (lastSlash !== -1) {\r\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\r\n            }\r\n            else {\r\n                this.fromModulePath = '';\r\n            }\r\n        }\r\n        ModuleIdResolver.prototype.isBuild = function () {\r\n            return this._config.isBuild();\r\n        };\r\n        /**\r\n         * Normalize 'a/../name' to 'name', etc.\r\n         */\r\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\r\n            var r = moduleId, pattern;\r\n            // replace /./ => /\r\n            pattern = /\\/\\.\\//;\r\n            while (pattern.test(r)) {\r\n                r = r.replace(pattern, '/');\r\n            }\r\n            // replace ^./ => nothing\r\n            r = r.replace(/^\\.\\//g, '');\r\n            // replace /aa/../ => / (BUT IGNORE /../../)\r\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\r\n            while (pattern.test(r)) {\r\n                r = r.replace(pattern, '/');\r\n            }\r\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\r\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\r\n            return r;\r\n        };\r\n        /**\r\n         * Resolve relative module ids\r\n         */\r\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\r\n            var result = moduleId;\r\n            if (!Utilities.isAbsolutePath(result)) {\r\n                if (Utilities.startsWith(result, './') || Utilities.startsWith(result, '../')) {\r\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        /**\r\n         * Transform a module id to a location. Appends .js to module ids\r\n         */\r\n        ModuleIdResolver.prototype.moduleIdToPaths = function (moduleId) {\r\n            var r = this._config.moduleIdToPaths(moduleId);\r\n            if (isNode && moduleId.indexOf('/') === -1) {\r\n                r.push('node|' + this.fromModulePath + '|' + moduleId);\r\n            }\r\n            return r;\r\n        };\r\n        /**\r\n         * Transform a module id or url to a location.\r\n         */\r\n        ModuleIdResolver.prototype.requireToUrl = function (url) {\r\n            return this._config.requireToUrl(url);\r\n        };\r\n        /**\r\n         * Should errors be caught when executing module factories?\r\n         */\r\n        ModuleIdResolver.prototype.shouldCatchError = function () {\r\n            return this._config.shouldCatchError();\r\n        };\r\n        /**\r\n         * Forward an error to the error handler.\r\n         */\r\n        ModuleIdResolver.prototype.onError = function (err) {\r\n            this._config.onError(err);\r\n        };\r\n        return ModuleIdResolver;\r\n    }());\r\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\r\n    // ------------------------------------------------------------------------\r\n    // Module\r\n    var Module = (function () {\r\n        function Module(id, dependencies, callback, errorback, recorder, moduleIdResolver, config, defineCallStack) {\r\n            if (defineCallStack === void 0) { defineCallStack = null; }\r\n            this._id = id;\r\n            this._dependencies = dependencies;\r\n            this._dependenciesValues = [];\r\n            this._callback = callback;\r\n            this._errorback = errorback;\r\n            this._recorder = recorder;\r\n            this._moduleIdResolver = moduleIdResolver;\r\n            this._exports = {};\r\n            this._exportsPassedIn = false;\r\n            this._config = config;\r\n            this._defineCallStack = defineCallStack;\r\n            this._digestDependencies();\r\n            if (this._unresolvedDependenciesCount === 0) {\r\n                this._complete();\r\n            }\r\n        }\r\n        Module.prototype._digestDependencies = function () {\r\n            var _this = this;\r\n            // Exact count of dependencies\r\n            this._unresolvedDependenciesCount = this._dependencies.length;\r\n            // Send on to the manager only a subset of dependencies\r\n            // For example, 'exports' and 'module' can be fulfilled locally\r\n            this._normalizedDependencies = [];\r\n            this._managerDependencies = [];\r\n            this._managerDependenciesMap = {};\r\n            var i, len, d;\r\n            for (i = 0, len = this._dependencies.length; i < len; i++) {\r\n                d = this._dependencies[i];\r\n                if (!d) {\r\n                    // Most likely, undefined sneaked in to the dependency array\r\n                    // Also, IE8 interprets ['a', 'b',] as ['a', 'b', undefined]\r\n                    console.warn('Please check module ' + this._id + ', the dependency list looks broken');\r\n                    this._normalizedDependencies[i] = d;\r\n                    this._dependenciesValues[i] = null;\r\n                    this._unresolvedDependenciesCount--;\r\n                    continue;\r\n                }\r\n                if (d === 'exports') {\r\n                    // Fulfill 'exports' locally and remember that it was passed in\r\n                    // Later on, we will ignore the return value of the factory method\r\n                    this._exportsPassedIn = true;\r\n                    this._normalizedDependencies[i] = d;\r\n                    this._dependenciesValues[i] = this._exports;\r\n                    this._unresolvedDependenciesCount--;\r\n                }\r\n                else if (d === 'module') {\r\n                    // Fulfill 'module' locally\r\n                    this._normalizedDependencies[i] = d;\r\n                    this._dependenciesValues[i] = {\r\n                        id: this._id,\r\n                        config: function () { return _this._config; }\r\n                    };\r\n                    this._unresolvedDependenciesCount--;\r\n                }\r\n                else if (d === 'require') {\r\n                    // Request 'requre' from the manager\r\n                    this._normalizedDependencies[i] = d;\r\n                    this.addManagerDependency(d, i);\r\n                }\r\n                else {\r\n                    // Normalize dependency and then request it from the manager\r\n                    var bangIndex = d.indexOf('!');\r\n                    if (bangIndex >= 0) {\r\n                        var pluginId = d.substring(0, bangIndex);\r\n                        var pluginParam = d.substring(bangIndex + 1, d.length);\r\n                        d = this._moduleIdResolver.resolveModule(pluginId) + '!' + pluginParam;\r\n                    }\r\n                    else {\r\n                        d = this._moduleIdResolver.resolveModule(d);\r\n                    }\r\n                    this._normalizedDependencies[i] = d;\r\n                    this.addManagerDependency(d, i);\r\n                }\r\n            }\r\n        };\r\n        Module.prototype.addManagerDependency = function (dependency, index) {\r\n            if (this._managerDependenciesMap.hasOwnProperty(dependency)) {\r\n                throw new Error('Module ' + this._id + ' contains multiple times a dependency to ' + dependency);\r\n            }\r\n            this._managerDependencies.push(dependency);\r\n            this._managerDependenciesMap[dependency] = index;\r\n        };\r\n        /**\r\n         * Called by the module manager because plugin dependencies can not\r\n         * be normalized statically, the part after '!' can only be normalized\r\n         * once the plugin has loaded and its normalize logic is plugged in.\r\n         */\r\n        Module.prototype.renameDependency = function (oldDependencyId, newDependencyId) {\r\n            if (!this._managerDependenciesMap.hasOwnProperty(oldDependencyId)) {\r\n                throw new Error('Loader: Cannot rename an unknown dependency!');\r\n            }\r\n            var index = this._managerDependenciesMap[oldDependencyId];\r\n            delete this._managerDependenciesMap[oldDependencyId];\r\n            this._managerDependenciesMap[newDependencyId] = index;\r\n            this._normalizedDependencies[index] = newDependencyId;\r\n        };\r\n        /**\r\n         * Get module's id\r\n         */\r\n        Module.prototype.getId = function () {\r\n            return this._id;\r\n        };\r\n        /**\r\n         * Get the module id resolver associated with this module\r\n         */\r\n        Module.prototype.getModuleIdResolver = function () {\r\n            return this._moduleIdResolver;\r\n        };\r\n        Module.prototype.isExportsPassedIn = function () {\r\n            return this._exportsPassedIn;\r\n        };\r\n        Module.prototype.getExports = function () {\r\n            return this._exports;\r\n        };\r\n        /**\r\n         * Get the initial dependencies (resolved).\r\n         * Does not account for any renames\r\n         */\r\n        Module.prototype.getDependencies = function () {\r\n            return this._managerDependencies;\r\n        };\r\n        Module.prototype.getNormalizedDependencies = function () {\r\n            return this._normalizedDependencies;\r\n        };\r\n        Module.prototype.getDefineCallStack = function () {\r\n            return this._defineCallStack;\r\n        };\r\n        Module.prototype._invokeFactory = function () {\r\n            if (this._moduleIdResolver.isBuild() && !Utilities.isAnonymousModule(this._id)) {\r\n                return {\r\n                    returnedValue: null,\r\n                    producedError: null\r\n                };\r\n            }\r\n            var producedError = null, returnedValue = null;\r\n            if (this._moduleIdResolver.shouldCatchError()) {\r\n                try {\r\n                    returnedValue = this._callback.apply(global, this._dependenciesValues);\r\n                }\r\n                catch (e) {\r\n                    producedError = e;\r\n                }\r\n                finally {\r\n                }\r\n            }\r\n            else {\r\n                returnedValue = this._callback.apply(global, this._dependenciesValues);\r\n            }\r\n            return {\r\n                returnedValue: returnedValue,\r\n                producedError: producedError\r\n            };\r\n        };\r\n        Module.prototype._complete = function () {\r\n            var producedError = null;\r\n            if (this._callback) {\r\n                if (typeof this._callback === 'function') {\r\n                    this._recorder.record(LoaderEventType.BeginInvokeFactory, this._id);\r\n                    var r = this._invokeFactory();\r\n                    producedError = r.producedError;\r\n                    this._recorder.record(LoaderEventType.EndInvokeFactory, this._id);\r\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this._exportsPassedIn || Utilities.isEmpty(this._exports))) {\r\n                        this._exports = r.returnedValue;\r\n                    }\r\n                }\r\n                else {\r\n                    this._exports = this._callback;\r\n                }\r\n            }\r\n            if (producedError) {\r\n                this.getModuleIdResolver().onError({\r\n                    errorCode: 'factory',\r\n                    moduleId: this._id,\r\n                    detail: producedError\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Release references used while resolving module\r\n         */\r\n        Module.prototype.cleanUp = function () {\r\n            if (this._moduleIdResolver && !this._moduleIdResolver.isBuild()) {\r\n                this._normalizedDependencies = null;\r\n                this._moduleIdResolver = null;\r\n            }\r\n            this._dependencies = null;\r\n            this._dependenciesValues = null;\r\n            this._callback = null;\r\n            this._managerDependencies = null;\r\n            this._managerDependenciesMap = null;\r\n        };\r\n        /**\r\n         * One of the direct dependencies or a transitive dependency has failed to load.\r\n         */\r\n        Module.prototype.onDependencyError = function (err) {\r\n            if (this._errorback) {\r\n                this._errorback(err);\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        /**\r\n         * Resolve a dependency with a value.\r\n         */\r\n        Module.prototype.resolveDependency = function (id, value) {\r\n            if (!this._managerDependenciesMap.hasOwnProperty(id)) {\r\n                throw new Error('Cannot resolve a dependency I do not have!');\r\n            }\r\n            this._dependenciesValues[this._managerDependenciesMap[id]] = value;\r\n            // Prevent resolving the same dependency twice\r\n            delete this._managerDependenciesMap[id];\r\n            this._unresolvedDependenciesCount--;\r\n            if (this._unresolvedDependenciesCount === 0) {\r\n                this._complete();\r\n            }\r\n        };\r\n        /**\r\n         * Is the current module complete?\r\n         */\r\n        Module.prototype.isComplete = function () {\r\n            return this._unresolvedDependenciesCount === 0;\r\n        };\r\n        return Module;\r\n    }());\r\n    AMDLoader.Module = Module;\r\n    // ------------------------------------------------------------------------\r\n    // LoaderEvent\r\n    (function (LoaderEventType) {\r\n        LoaderEventType[LoaderEventType[\"LoaderAvailable\"] = 1] = \"LoaderAvailable\";\r\n        LoaderEventType[LoaderEventType[\"BeginLoadingScript\"] = 10] = \"BeginLoadingScript\";\r\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptOK\"] = 11] = \"EndLoadingScriptOK\";\r\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptError\"] = 12] = \"EndLoadingScriptError\";\r\n        LoaderEventType[LoaderEventType[\"BeginInvokeFactory\"] = 21] = \"BeginInvokeFactory\";\r\n        LoaderEventType[LoaderEventType[\"EndInvokeFactory\"] = 22] = \"EndInvokeFactory\";\r\n        LoaderEventType[LoaderEventType[\"NodeBeginEvaluatingScript\"] = 31] = \"NodeBeginEvaluatingScript\";\r\n        LoaderEventType[LoaderEventType[\"NodeEndEvaluatingScript\"] = 32] = \"NodeEndEvaluatingScript\";\r\n        LoaderEventType[LoaderEventType[\"NodeBeginNativeRequire\"] = 33] = \"NodeBeginNativeRequire\";\r\n        LoaderEventType[LoaderEventType[\"NodeEndNativeRequire\"] = 34] = \"NodeEndNativeRequire\";\r\n    })(AMDLoader.LoaderEventType || (AMDLoader.LoaderEventType = {}));\r\n    var LoaderEventType = AMDLoader.LoaderEventType;\r\n    function getHighPerformanceTimestamp() {\r\n        return (hasPerformanceNow ? global.performance.now() : Date.now());\r\n    }\r\n    var LoaderEvent = (function () {\r\n        function LoaderEvent(type, detail, timestamp) {\r\n            this.type = type;\r\n            this.detail = detail;\r\n            this.timestamp = timestamp;\r\n        }\r\n        return LoaderEvent;\r\n    }());\r\n    AMDLoader.LoaderEvent = LoaderEvent;\r\n    var LoaderEventRecorder = (function () {\r\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\r\n            this._events = [new LoaderEvent(LoaderEventType.LoaderAvailable, '', loaderAvailableTimestamp)];\r\n        }\r\n        LoaderEventRecorder.prototype.record = function (type, detail) {\r\n            this._events.push(new LoaderEvent(type, detail, getHighPerformanceTimestamp()));\r\n        };\r\n        LoaderEventRecorder.prototype.getEvents = function () {\r\n            return this._events;\r\n        };\r\n        return LoaderEventRecorder;\r\n    }());\r\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\r\n    var NullLoaderEventRecorder = (function () {\r\n        function NullLoaderEventRecorder() {\r\n        }\r\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\r\n            // Nothing to do\r\n        };\r\n        NullLoaderEventRecorder.prototype.getEvents = function () {\r\n            return [];\r\n        };\r\n        NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\r\n        return NullLoaderEventRecorder;\r\n    }());\r\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\r\n    var ModuleManager = (function () {\r\n        function ModuleManager(scriptLoader) {\r\n            this._recorder = null;\r\n            this._config = new Configuration();\r\n            this._scriptLoader = scriptLoader;\r\n            this._modules = {};\r\n            this._knownModules = {};\r\n            this._inverseDependencies = {};\r\n            this._dependencies = {};\r\n            this._inversePluginDependencies = {};\r\n            this._queuedDefineCalls = [];\r\n            this._loadingScriptsCount = 0;\r\n            this._resolvedScriptPaths = {};\r\n        }\r\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\r\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\r\n            var normalizedPath = normalize(needle);\r\n            var stackPieces = stack.split(/\\n/);\r\n            for (var i = 0; i < stackPieces.length; i++) {\r\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\r\n                if (m) {\r\n                    var stackPath = m[1];\r\n                    var stackLine = m[2];\r\n                    var stackColumn = m[3];\r\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\r\n                    stackPath = stackPath.substr(trimPathOffset);\r\n                    stackPath = normalize(stackPath);\r\n                    if (stackPath === normalizedPath) {\r\n                        var r = {\r\n                            line: parseInt(stackLine, 10),\r\n                            col: parseInt(stackColumn, 10)\r\n                        };\r\n                        if (r.line === 1) {\r\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\r\n                        }\r\n                        return r;\r\n                    }\r\n                }\r\n            }\r\n            throw new Error('Could not correlate define call site for needle ' + needle);\r\n        };\r\n        ModuleManager.prototype.getBuildInfo = function () {\r\n            var _this = this;\r\n            if (!this._config.isBuild()) {\r\n                return null;\r\n            }\r\n            return Object.keys(this._modules).map(function (moduleId) {\r\n                var m = _this._modules[moduleId];\r\n                var location = _this._resolvedScriptPaths[moduleId] || null;\r\n                var defineStack = m.getDefineCallStack();\r\n                return {\r\n                    id: moduleId,\r\n                    path: location,\r\n                    defineLocation: (location && defineStack ? ModuleManager._findRelevantLocationInStack(location, defineStack) : null),\r\n                    dependencies: m.getNormalizedDependencies(),\r\n                    shim: (_this._config.isShimmed(moduleId) ? _this._config.getShimmedModulesStr(moduleId) : null),\r\n                    exports: m.getExports()\r\n                };\r\n            });\r\n        };\r\n        ModuleManager.prototype.getRecorder = function () {\r\n            if (!this._recorder) {\r\n                if (this._config.shouldRecordStats()) {\r\n                    this._recorder = new LoaderEventRecorder(loaderAvailableTimestamp);\r\n                }\r\n                else {\r\n                    this._recorder = NullLoaderEventRecorder.INSTANCE;\r\n                }\r\n            }\r\n            return this._recorder;\r\n        };\r\n        ModuleManager.prototype.getLoaderEvents = function () {\r\n            return this.getRecorder().getEvents();\r\n        };\r\n        /**\r\n         * Defines a module.\r\n         * @param id @see defineModule\r\n         * @param dependencies @see defineModule\r\n         * @param callback @see defineModule\r\n         */\r\n        ModuleManager.prototype.enqueueDefineModule = function (id, dependencies, callback) {\r\n            if (this._loadingScriptsCount === 0) {\r\n                // There are no scripts currently loading, so no load event will be fired, so the queue will not be consumed\r\n                this.defineModule(id, dependencies, callback, null, null);\r\n            }\r\n            else {\r\n                this._queuedDefineCalls.push({\r\n                    id: id,\r\n                    stack: null,\r\n                    dependencies: dependencies,\r\n                    callback: callback\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\r\n         * @param dependecies @see defineModule\r\n         * @param callback @see defineModule\r\n         */\r\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\r\n            var stack = null;\r\n            if (this._config.isBuild()) {\r\n                stack = (new Error('StackLocation')).stack;\r\n            }\r\n            this._queuedDefineCalls.push({\r\n                id: null,\r\n                stack: stack,\r\n                dependencies: dependencies,\r\n                callback: callback\r\n            });\r\n        };\r\n        /**\r\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\r\n         * @param id An unique and absolute id of the module. This must not collide with another module's id\r\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\r\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\r\n         */\r\n        ModuleManager.prototype.defineModule = function (id, dependencies, callback, errorback, stack, moduleIdResolver) {\r\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(this._config, id); }\r\n            if (this._modules.hasOwnProperty(id)) {\r\n                if (!this._config.isDuplicateMessageIgnoredFor(id)) {\r\n                    console.warn('Duplicate definition of module \\'' + id + '\\'');\r\n                }\r\n                // Super important! Completely ignore duplicate module definition\r\n                return;\r\n            }\r\n            var moduleConfig = this._config.getConfigForModule(id);\r\n            var m = new Module(id, dependencies, callback, errorback, this.getRecorder(), moduleIdResolver, moduleConfig, stack);\r\n            this._modules[id] = m;\r\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\r\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\r\n            this._resolve(m);\r\n        };\r\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\r\n            if (typeof dependencies === 'string') {\r\n                return this.synchronousRequire(dependencies, moduleIdResolver);\r\n            }\r\n            this.defineModule(Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\r\n        };\r\n        /**\r\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\r\n         * @param id The unique and absolute id of the required module\r\n         * @return The exports of module 'id'\r\n         */\r\n        ModuleManager.prototype.synchronousRequire = function (id, moduleIdResolver) {\r\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(this._config, id); }\r\n            var moduleId = moduleIdResolver.resolveModule(id);\r\n            var bangIndex = moduleId.indexOf('!');\r\n            if (bangIndex >= 0) {\r\n                // This is a synchronous require for a plugin dependency, so be sure to normalize the pluginParam (the piece after '!')\r\n                var pluginId = moduleId.substring(0, bangIndex), pluginParam = moduleId.substring(bangIndex + 1, moduleId.length), plugin = {};\r\n                if (this._modules.hasOwnProperty(pluginId)) {\r\n                    plugin = this._modules[pluginId];\r\n                }\r\n                // Helper to normalize the part which comes after '!'\r\n                var normalize = function (_arg) {\r\n                    return moduleIdResolver.resolveModule(_arg);\r\n                };\r\n                if (typeof plugin.normalize === 'function') {\r\n                    pluginParam = plugin.normalize(pluginParam, normalize);\r\n                }\r\n                else {\r\n                    pluginParam = normalize(pluginParam);\r\n                }\r\n                moduleId = pluginId + '!' + pluginParam;\r\n            }\r\n            if (!this._modules.hasOwnProperty(moduleId)) {\r\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + moduleId + '\\'. This is the first mention of this module!');\r\n            }\r\n            var m = this._modules[moduleId];\r\n            if (!m.isComplete()) {\r\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + moduleId + '\\'. This module has not been resolved completely yet.');\r\n            }\r\n            return m.getExports();\r\n        };\r\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\r\n            var oldShouldRecordStats = this._config.shouldRecordStats();\r\n            if (shouldOverwrite) {\r\n                this._config = new Configuration(params);\r\n            }\r\n            else {\r\n                this._config = this._config.cloneAndMerge(params);\r\n            }\r\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\r\n                this._recorder = null;\r\n            }\r\n        };\r\n        ModuleManager.prototype.getConfigurationOptions = function () {\r\n            return this._config.getOptionsLiteral();\r\n        };\r\n        /**\r\n         * Callback from the scriptLoader when a module has been loaded.\r\n         * This means its code is available and has been executed.\r\n         */\r\n        ModuleManager.prototype._onLoad = function (id) {\r\n            var defineCall;\r\n            this._loadingScriptsCount--;\r\n            if (this._config.isShimmed(id)) {\r\n                // Do not consume queue, might end up consuming a module that is later expected\r\n                // If a shimmed module has loaded, create a define call for it\r\n                defineCall = this._config.getShimmedModuleDefine(id);\r\n                this.defineModule(id, defineCall.dependencies, defineCall.callback, null, defineCall.stack);\r\n            }\r\n            else {\r\n                if (this._queuedDefineCalls.length === 0) {\r\n                    // Loaded a file and it didn't call `define`\r\n                    this._loadingScriptsCount++;\r\n                    this._onLoadError(id, new Error('No define call received from module ' + id + '.'));\r\n                }\r\n                else {\r\n                    // Consume queue until first anonymous define call\r\n                    // or until current id is found in the queue\r\n                    while (this._queuedDefineCalls.length > 0) {\r\n                        defineCall = this._queuedDefineCalls.shift();\r\n                        if (defineCall.id === id || defineCall.id === null) {\r\n                            // Hit an anonymous define call or its own define call\r\n                            defineCall.id = id;\r\n                            this.defineModule(defineCall.id, defineCall.dependencies, defineCall.callback, null, defineCall.stack);\r\n                            break;\r\n                        }\r\n                        else {\r\n                            // Hit other named define calls\r\n                            this.defineModule(defineCall.id, defineCall.dependencies, defineCall.callback, null, defineCall.stack);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (this._loadingScriptsCount === 0) {\r\n                // No more on loads will be triggered, so make sure queue is empty\r\n                while (this._queuedDefineCalls.length > 0) {\r\n                    defineCall = this._queuedDefineCalls.shift();\r\n                    if (defineCall.id === null) {\r\n                        console.warn('Found an unmatched anonymous define call in the define queue. Ignoring it!');\r\n                        console.warn(defineCall.callback);\r\n                    }\r\n                    else {\r\n                        // Hit other named define calls\r\n                        this.defineModule(defineCall.id, defineCall.dependencies, defineCall.callback, null, defineCall.stack);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Callback from the scriptLoader when a module hasn't been loaded.\r\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\r\n         */\r\n        ModuleManager.prototype._onLoadError = function (id, err) {\r\n            this._loadingScriptsCount--;\r\n            var error = {\r\n                errorCode: 'load',\r\n                moduleId: id,\r\n                neededBy: (this._inverseDependencies[id] ? this._inverseDependencies[id].slice(0) : []),\r\n                detail: err\r\n            };\r\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\r\n            var seenModuleId = {}, queueElement, someoneNotified = false, queue = [];\r\n            queue.push(id);\r\n            seenModuleId[id] = true;\r\n            while (queue.length > 0) {\r\n                queueElement = queue.shift();\r\n                if (this._modules[queueElement]) {\r\n                    someoneNotified = this._modules[queueElement].onDependencyError(error) || someoneNotified;\r\n                }\r\n                if (this._inverseDependencies[queueElement]) {\r\n                    for (var i = 0, len = this._inverseDependencies[queueElement].length; i < len; i++) {\r\n                        if (!seenModuleId.hasOwnProperty(this._inverseDependencies[queueElement][i])) {\r\n                            queue.push(this._inverseDependencies[queueElement][i]);\r\n                            seenModuleId[this._inverseDependencies[queueElement][i]] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!someoneNotified) {\r\n                this._config.onError(error);\r\n            }\r\n        };\r\n        /**\r\n         * Module id has been loaded completely, its exports are available.\r\n         * @param id module's id\r\n         * @param exports module's exports\r\n         */\r\n        ModuleManager.prototype._onModuleComplete = function (id, exports) {\r\n            var i, len, inverseDependencyId, inverseDependency;\r\n            // Clean up module's dependencies since module is now complete\r\n            delete this._dependencies[id];\r\n            if (this._inverseDependencies.hasOwnProperty(id)) {\r\n                // Fetch and clear inverse dependencies\r\n                var inverseDependencies = this._inverseDependencies[id];\r\n                delete this._inverseDependencies[id];\r\n                // Resolve one inverse dependency at a time, always\r\n                // on the lookout for a completed module.\r\n                for (i = 0, len = inverseDependencies.length; i < len; i++) {\r\n                    inverseDependencyId = inverseDependencies[i];\r\n                    inverseDependency = this._modules[inverseDependencyId];\r\n                    inverseDependency.resolveDependency(id, exports);\r\n                    if (inverseDependency.isComplete()) {\r\n                        this._onModuleComplete(inverseDependencyId, inverseDependency.getExports());\r\n                    }\r\n                }\r\n            }\r\n            if (this._inversePluginDependencies.hasOwnProperty(id)) {\r\n                // This module is used as a plugin at least once\r\n                // Fetch and clear these inverse plugin dependencies\r\n                var inversePluginDependencies = this._inversePluginDependencies[id];\r\n                delete this._inversePluginDependencies[id];\r\n                // Resolve plugin dependencies one at a time\r\n                for (i = 0, len = inversePluginDependencies.length; i < len; i++) {\r\n                    var inversePluginDependencyId = inversePluginDependencies[i].moduleId;\r\n                    var inversePluginDependency = this._modules[inversePluginDependencyId];\r\n                    this._resolvePluginDependencySync(inversePluginDependencyId, inversePluginDependencies[i].dependencyId, exports);\r\n                    // Anonymous modules might already be gone at this point\r\n                    if (inversePluginDependency.isComplete()) {\r\n                        this._onModuleComplete(inversePluginDependencyId, inversePluginDependency.getExports());\r\n                    }\r\n                }\r\n            }\r\n            if (Utilities.isAnonymousModule(id)) {\r\n                // Clean up references to anonymous modules, to prevent memory leaks\r\n                delete this._modules[id];\r\n                delete this._dependencies[id];\r\n            }\r\n            else {\r\n                this._modules[id].cleanUp();\r\n            }\r\n        };\r\n        /**\r\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\r\n         * Returns true if there is such a path or false otherwise.\r\n         * @param from Module id to start at\r\n         * @param to Module id to look for\r\n         */\r\n        ModuleManager.prototype._hasDependencyPath = function (from, to) {\r\n            var i, len, inQueue = {}, queue = [], element, dependencies, dependency;\r\n            // Insert 'from' in queue\r\n            queue.push(from);\r\n            inQueue[from] = true;\r\n            while (queue.length > 0) {\r\n                // Pop first inserted element of queue\r\n                element = queue.shift();\r\n                if (this._dependencies.hasOwnProperty(element)) {\r\n                    dependencies = this._dependencies[element];\r\n                    // Walk the element's dependencies\r\n                    for (i = 0, len = dependencies.length; i < len; i++) {\r\n                        dependency = dependencies[i];\r\n                        if (dependency === to) {\r\n                            // There is a path to 'to'\r\n                            return true;\r\n                        }\r\n                        if (!inQueue.hasOwnProperty(dependency)) {\r\n                            // Insert 'dependency' in queue\r\n                            inQueue[dependency] = true;\r\n                            queue.push(dependency);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // There is no path to 'to'\r\n            return false;\r\n        };\r\n        /**\r\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\r\n         * Returns cycle as array.\r\n         * @param from Module id to start at\r\n         * @param to Module id to look for\r\n         */\r\n        ModuleManager.prototype._findCyclePath = function (from, to, depth) {\r\n            if (from === to || depth === 50) {\r\n                return [from];\r\n            }\r\n            if (!this._dependencies.hasOwnProperty(from)) {\r\n                return null;\r\n            }\r\n            var path, dependencies = this._dependencies[from];\r\n            // Walk the element's dependencies\r\n            for (var i = 0, len = dependencies.length; i < len; i++) {\r\n                path = this._findCyclePath(dependencies[i], to, depth + 1);\r\n                if (path !== null) {\r\n                    path.push(from);\r\n                    return path;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Create the local 'require' that is passed into modules\r\n         */\r\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\r\n            var _this = this;\r\n            var result = (function (dependencies, callback, errorback) {\r\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\r\n            });\r\n            result.toUrl = function (id) {\r\n                return moduleIdResolver.requireToUrl(moduleIdResolver.resolveModule(id));\r\n            };\r\n            result.getStats = function () {\r\n                return _this.getLoaderEvents();\r\n            };\r\n            result.__$__nodeRequire = global.nodeRequire;\r\n            return result;\r\n        };\r\n        /**\r\n         * Resolve a plugin dependency with the plugin loaded & complete\r\n         * @param moduleId The module that has this dependency\r\n         * @param dependencyId The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\r\n         * @param plugin The plugin (what the plugin exports)\r\n         */\r\n        ModuleManager.prototype._resolvePluginDependencySync = function (moduleId, dependencyId, plugin) {\r\n            var _this = this;\r\n            var m = this._modules[moduleId], moduleIdResolver = m.getModuleIdResolver(), bangIndex = dependencyId.indexOf('!'), pluginId = dependencyId.substring(0, bangIndex), pluginParam = dependencyId.substring(bangIndex + 1, dependencyId.length);\r\n            // Helper to normalize the part which comes after '!'\r\n            var normalize = function (_arg) {\r\n                return moduleIdResolver.resolveModule(_arg);\r\n            };\r\n            if (typeof plugin.normalize === 'function') {\r\n                pluginParam = plugin.normalize(pluginParam, normalize);\r\n            }\r\n            else {\r\n                pluginParam = normalize(pluginParam);\r\n            }\r\n            if (!plugin.dynamic) {\r\n                // Now normalize the entire dependency\r\n                var oldDependencyId = dependencyId;\r\n                dependencyId = pluginId + '!' + pluginParam;\r\n                // Let the module know that the dependency has been normalized so it can update its internal state\r\n                m.renameDependency(oldDependencyId, dependencyId);\r\n                this._resolveDependency(moduleId, dependencyId, function (moduleId) {\r\n                    // Delegate the loading of the resource to the plugin\r\n                    var load = (function (value) {\r\n                        _this.defineModule(dependencyId, [], value, null, null);\r\n                    });\r\n                    load.error = function (err) {\r\n                        _this._config.onError({\r\n                            errorCode: 'load',\r\n                            moduleId: dependencyId,\r\n                            neededBy: (_this._inverseDependencies[dependencyId] ? _this._inverseDependencies[dependencyId].slice(0) : []),\r\n                            detail: err\r\n                        });\r\n                    };\r\n                    plugin.load(pluginParam, _this._createRequire(moduleIdResolver), load, _this._config.getOptionsLiteral());\r\n                });\r\n            }\r\n            else {\r\n                // This plugin is dynamic and does not want the loader to cache anything on its behalf\r\n                // Delegate the loading of the resource to the plugin\r\n                var load = (function (value) {\r\n                    m.resolveDependency(dependencyId, value);\r\n                    if (m.isComplete()) {\r\n                        _this._onModuleComplete(moduleId, m.getExports());\r\n                    }\r\n                });\r\n                load.error = function (err) {\r\n                    _this._config.onError({\r\n                        errorCode: 'load',\r\n                        moduleId: dependencyId,\r\n                        neededBy: [moduleId],\r\n                        detail: err\r\n                    });\r\n                };\r\n                plugin.load(pluginParam, this._createRequire(moduleIdResolver), load, this._config.getOptionsLiteral());\r\n            }\r\n        };\r\n        /**\r\n         * Resolve a plugin dependency with the plugin not loaded or not complete yet\r\n         * @param moduleId The module that has this dependency\r\n         * @param dependencyId The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\r\n         */\r\n        ModuleManager.prototype._resolvePluginDependencyAsync = function (moduleId, dependencyId) {\r\n            var m = this._modules[moduleId], bangIndex = dependencyId.indexOf('!'), pluginId = dependencyId.substring(0, bangIndex);\r\n            // Record dependency for when the plugin gets loaded\r\n            this._inversePluginDependencies[pluginId] = this._inversePluginDependencies[pluginId] || [];\r\n            this._inversePluginDependencies[pluginId].push({\r\n                moduleId: moduleId,\r\n                dependencyId: dependencyId\r\n            });\r\n            if (!this._modules.hasOwnProperty(pluginId) && !this._knownModules.hasOwnProperty(pluginId)) {\r\n                // This is the first mention of module 'pluginId', so load it\r\n                this._knownModules[pluginId] = true;\r\n                this._loadModule(m.getModuleIdResolver(), pluginId);\r\n            }\r\n        };\r\n        /**\r\n         * Resolve a plugin dependency\r\n         * @param moduleId The module that has this dependency\r\n         * @param dependencyId The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\r\n         */\r\n        ModuleManager.prototype._resolvePluginDependency = function (moduleId, dependencyId) {\r\n            var bangIndex = dependencyId.indexOf('!'), pluginId = dependencyId.substring(0, bangIndex);\r\n            if (this._modules.hasOwnProperty(pluginId) && this._modules[pluginId].isComplete()) {\r\n                // Plugin has already been loaded & resolved\r\n                this._resolvePluginDependencySync(moduleId, dependencyId, this._modules[pluginId].getExports());\r\n            }\r\n            else {\r\n                // Plugin is not loaded or not resolved\r\n                this._resolvePluginDependencyAsync(moduleId, dependencyId);\r\n            }\r\n        };\r\n        /**\r\n         * Resolve a module dependency to a shimmed module and delegate the loading to loadCallback.\r\n         * @param moduleId The module that has this dependency\r\n         * @param dependencyId The normalized dependency that appears in the module -- this module is shimmed\r\n         * @param loadCallback Callback that will be called to trigger the loading of 'dependencyId' if needed\r\n         */\r\n        ModuleManager.prototype._resolveShimmedDependency = function (moduleId, dependencyId, loadCallback) {\r\n            // If a shimmed module has dependencies, we must first load those dependencies\r\n            // and only when those are loaded we can load the shimmed module.\r\n            // To achieve this, we inject a module definition with those dependencies\r\n            // and from its factory method we really load the shimmed module.\r\n            var defineInfo = this._config.getShimmedModuleDefine(dependencyId);\r\n            if (defineInfo.dependencies.length > 0) {\r\n                this.defineModule(Utilities.generateAnonymousModule(), defineInfo.dependencies, function () { return loadCallback(dependencyId); }, null, null, new ModuleIdResolver(this._config, dependencyId));\r\n            }\r\n            else {\r\n                loadCallback(dependencyId);\r\n            }\r\n        };\r\n        /**\r\n         * Resolve a module dependency and delegate the loading to loadCallback\r\n         * @param moduleId The module that has this dependency\r\n         * @param dependencyId The normalized dependency that appears in the module\r\n         * @param loadCallback Callback that will be called to trigger the loading of 'dependencyId' if needed\r\n         */\r\n        ModuleManager.prototype._resolveDependency = function (moduleId, dependencyId, loadCallback) {\r\n            var m = this._modules[moduleId];\r\n            if (this._modules.hasOwnProperty(dependencyId) && this._modules[dependencyId].isComplete()) {\r\n                // Dependency has already been loaded & resolved\r\n                m.resolveDependency(dependencyId, this._modules[dependencyId].getExports());\r\n            }\r\n            else {\r\n                // Dependency is not loaded or not resolved\r\n                // Record dependency\r\n                this._dependencies[moduleId].push(dependencyId);\r\n                if (this._hasDependencyPath(dependencyId, moduleId)) {\r\n                    console.warn('There is a dependency cycle between \\'' + dependencyId + '\\' and \\'' + moduleId + '\\'. The cyclic path follows:');\r\n                    var cyclePath = this._findCyclePath(dependencyId, moduleId, 0);\r\n                    cyclePath.reverse();\r\n                    cyclePath.push(dependencyId);\r\n                    console.warn(cyclePath.join(' => \\n'));\r\n                    // Break the cycle\r\n                    var dependency = this._modules.hasOwnProperty(dependencyId) ? this._modules[dependencyId] : null;\r\n                    var dependencyValue;\r\n                    if (dependency && dependency.isExportsPassedIn()) {\r\n                        // If dependency uses 'exports', then resolve it with that object\r\n                        dependencyValue = dependency.getExports();\r\n                    }\r\n                    // Resolve dependency with undefined or with 'exports' object\r\n                    m.resolveDependency(dependencyId, dependencyValue);\r\n                }\r\n                else {\r\n                    // Since we are actually waiting for this dependency,\r\n                    // record inverse dependency\r\n                    this._inverseDependencies[dependencyId] = this._inverseDependencies[dependencyId] || [];\r\n                    this._inverseDependencies[dependencyId].push(moduleId);\r\n                    if (!this._modules.hasOwnProperty(dependencyId) && !this._knownModules.hasOwnProperty(dependencyId)) {\r\n                        // This is the first mention of module 'dependencyId', so load it\r\n                        // Mark this module as loaded so we don't hit this case again\r\n                        this._knownModules[dependencyId] = true;\r\n                        if (this._config.isShimmed(dependencyId)) {\r\n                            this._resolveShimmedDependency(moduleId, dependencyId, loadCallback);\r\n                        }\r\n                        else {\r\n                            loadCallback(dependencyId);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        ModuleManager.prototype._loadModule = function (anyModuleIdResolver, moduleId) {\r\n            var _this = this;\r\n            this._loadingScriptsCount++;\r\n            var paths = anyModuleIdResolver.moduleIdToPaths(moduleId);\r\n            var lastPathIndex = -1;\r\n            var loadNextPath = function (err) {\r\n                lastPathIndex++;\r\n                if (lastPathIndex >= paths.length) {\r\n                    // No more paths to try\r\n                    _this._onLoadError(moduleId, err);\r\n                }\r\n                else {\r\n                    var currentPath = paths[lastPathIndex];\r\n                    var recorder = _this.getRecorder();\r\n                    if (_this._config.isBuild() && currentPath === 'empty:') {\r\n                        _this._resolvedScriptPaths[moduleId] = currentPath;\r\n                        _this.enqueueDefineModule(moduleId, [], null);\r\n                        _this._onLoad(moduleId);\r\n                        return;\r\n                    }\r\n                    recorder.record(LoaderEventType.BeginLoadingScript, currentPath);\r\n                    _this._scriptLoader.load(currentPath, function () {\r\n                        if (_this._config.isBuild()) {\r\n                            _this._resolvedScriptPaths[moduleId] = currentPath;\r\n                        }\r\n                        recorder.record(LoaderEventType.EndLoadingScriptOK, currentPath);\r\n                        _this._onLoad(moduleId);\r\n                    }, function (err) {\r\n                        recorder.record(LoaderEventType.EndLoadingScriptError, currentPath);\r\n                        loadNextPath(err);\r\n                    }, recorder);\r\n                }\r\n            };\r\n            loadNextPath(null);\r\n        };\r\n        /**\r\n         * Examine the dependencies of module 'module' and resolve them as needed.\r\n         */\r\n        ModuleManager.prototype._resolve = function (m) {\r\n            var _this = this;\r\n            var i, len, id, dependencies, dependencyId, moduleIdResolver;\r\n            id = m.getId();\r\n            dependencies = m.getDependencies();\r\n            moduleIdResolver = m.getModuleIdResolver();\r\n            this._dependencies[id] = [];\r\n            var loadCallback = function (moduleId) { return _this._loadModule(moduleIdResolver, moduleId); };\r\n            for (i = 0, len = dependencies.length; i < len; i++) {\r\n                dependencyId = dependencies[i];\r\n                if (dependencyId === 'require') {\r\n                    m.resolveDependency(dependencyId, this._createRequire(moduleIdResolver));\r\n                    continue;\r\n                }\r\n                else {\r\n                    if (dependencyId.indexOf('!') >= 0) {\r\n                        this._resolvePluginDependency(id, dependencyId);\r\n                    }\r\n                    else {\r\n                        this._resolveDependency(id, dependencyId, loadCallback);\r\n                    }\r\n                }\r\n            }\r\n            if (m.isComplete()) {\r\n                // This module was completed as soon as its been seen.\r\n                this._onModuleComplete(id, m.getExports());\r\n            }\r\n        };\r\n        return ModuleManager;\r\n    }());\r\n    AMDLoader.ModuleManager = ModuleManager;\r\n    /**\r\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\r\n     */\r\n    var OnlyOnceScriptLoader = (function () {\r\n        function OnlyOnceScriptLoader(actualScriptLoader) {\r\n            this.actualScriptLoader = actualScriptLoader;\r\n            this.callbackMap = {};\r\n        }\r\n        OnlyOnceScriptLoader.prototype.setModuleManager = function (moduleManager) {\r\n            this.actualScriptLoader.setModuleManager(moduleManager);\r\n        };\r\n        OnlyOnceScriptLoader.prototype.load = function (scriptSrc, callback, errorback, recorder) {\r\n            var _this = this;\r\n            var scriptCallbacks = {\r\n                callback: callback,\r\n                errorback: errorback\r\n            };\r\n            if (this.callbackMap.hasOwnProperty(scriptSrc)) {\r\n                this.callbackMap[scriptSrc].push(scriptCallbacks);\r\n                return;\r\n            }\r\n            this.callbackMap[scriptSrc] = [scriptCallbacks];\r\n            this.actualScriptLoader.load(scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); }, recorder);\r\n        };\r\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\r\n            var scriptCallbacks = this.callbackMap[scriptSrc];\r\n            delete this.callbackMap[scriptSrc];\r\n            for (var i = 0; i < scriptCallbacks.length; i++) {\r\n                scriptCallbacks[i].callback();\r\n            }\r\n        };\r\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\r\n            var scriptCallbacks = this.callbackMap[scriptSrc];\r\n            delete this.callbackMap[scriptSrc];\r\n            for (var i = 0; i < scriptCallbacks.length; i++) {\r\n                scriptCallbacks[i].errorback(err);\r\n            }\r\n        };\r\n        return OnlyOnceScriptLoader;\r\n    }());\r\n    var BrowserScriptLoader = (function () {\r\n        function BrowserScriptLoader() {\r\n        }\r\n        /**\r\n         * Attach load / error listeners to a script element and remove them when either one has fired.\r\n         * Implemented for browssers supporting 'onreadystatechange' events, such as IE8 or IE9\r\n         */\r\n        BrowserScriptLoader.prototype.attachListenersV1 = function (script, callback, errorback) {\r\n            var unbind = function () {\r\n                script.detachEvent('onreadystatechange', loadEventListener);\r\n                if (script.addEventListener) {\r\n                    script.removeEventListener('error', errorEventListener);\r\n                }\r\n            };\r\n            var loadEventListener = function (e) {\r\n                if (script.readyState === 'loaded' || script.readyState === 'complete') {\r\n                    unbind();\r\n                    callback();\r\n                }\r\n            };\r\n            var errorEventListener = function (e) {\r\n                unbind();\r\n                errorback(e);\r\n            };\r\n            script.attachEvent('onreadystatechange', loadEventListener);\r\n            if (script.addEventListener) {\r\n                script.addEventListener('error', errorEventListener);\r\n            }\r\n        };\r\n        /**\r\n         * Attach load / error listeners to a script element and remove them when either one has fired.\r\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\r\n         */\r\n        BrowserScriptLoader.prototype.attachListenersV2 = function (script, callback, errorback) {\r\n            var unbind = function () {\r\n                script.removeEventListener('load', loadEventListener);\r\n                script.removeEventListener('error', errorEventListener);\r\n            };\r\n            var loadEventListener = function (e) {\r\n                unbind();\r\n                callback();\r\n            };\r\n            var errorEventListener = function (e) {\r\n                unbind();\r\n                errorback(e);\r\n            };\r\n            script.addEventListener('load', loadEventListener);\r\n            script.addEventListener('error', errorEventListener);\r\n        };\r\n        BrowserScriptLoader.prototype.setModuleManager = function (moduleManager) {\r\n            /* Intentional empty */\r\n        };\r\n        BrowserScriptLoader.prototype.load = function (scriptSrc, callback, errorback) {\r\n            var script = document.createElement('script');\r\n            script.setAttribute('async', 'async');\r\n            script.setAttribute('type', 'text/javascript');\r\n            if (global.attachEvent) {\r\n                this.attachListenersV1(script, callback, errorback);\r\n            }\r\n            else {\r\n                this.attachListenersV2(script, callback, errorback);\r\n            }\r\n            script.setAttribute('src', scriptSrc);\r\n            document.getElementsByTagName('head')[0].appendChild(script);\r\n        };\r\n        return BrowserScriptLoader;\r\n    }());\r\n    var WorkerScriptLoader = (function () {\r\n        function WorkerScriptLoader() {\r\n            this.loadCalls = [];\r\n            this.loadTimeout = -1;\r\n        }\r\n        WorkerScriptLoader.prototype.setModuleManager = function (moduleManager) {\r\n            /* Intentional empty */\r\n        };\r\n        WorkerScriptLoader.prototype.load = function (scriptSrc, callback, errorback) {\r\n            var _this = this;\r\n            this.loadCalls.push({\r\n                scriptSrc: scriptSrc,\r\n                callback: callback,\r\n                errorback: errorback\r\n            });\r\n            if (navigator.userAgent.indexOf('Firefox') >= 0) {\r\n                // Firefox fails installing the timer every now and then :(\r\n                this._load();\r\n            }\r\n            else {\r\n                if (this.loadTimeout === -1) {\r\n                    this.loadTimeout = setTimeout(function () {\r\n                        _this.loadTimeout = -1;\r\n                        _this._load();\r\n                    }, 0);\r\n                }\r\n            }\r\n        };\r\n        WorkerScriptLoader.prototype._load = function () {\r\n            var loadCalls = this.loadCalls;\r\n            this.loadCalls = [];\r\n            var i, len = loadCalls.length, scripts = [];\r\n            for (i = 0; i < len; i++) {\r\n                scripts.push(loadCalls[i].scriptSrc);\r\n            }\r\n            var errorOccured = false;\r\n            try {\r\n                importScripts.apply(null, scripts);\r\n            }\r\n            catch (e) {\r\n                errorOccured = true;\r\n                for (i = 0; i < len; i++) {\r\n                    loadCalls[i].errorback(e);\r\n                }\r\n            }\r\n            if (!errorOccured) {\r\n                for (i = 0; i < len; i++) {\r\n                    loadCalls[i].callback();\r\n                }\r\n            }\r\n        };\r\n        return WorkerScriptLoader;\r\n    }());\r\n    var NodeScriptLoader = (function () {\r\n        function NodeScriptLoader() {\r\n            this._initialized = false;\r\n        }\r\n        NodeScriptLoader.prototype.setModuleManager = function (moduleManager) {\r\n            this._moduleManager = moduleManager;\r\n        };\r\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\r\n            if (this._initialized) {\r\n                return;\r\n            }\r\n            this._initialized = true;\r\n            this._fs = nodeRequire('fs');\r\n            this._vm = nodeRequire('vm');\r\n            this._path = nodeRequire('path');\r\n        };\r\n        NodeScriptLoader.prototype.load = function (scriptSrc, callback, errorback, recorder) {\r\n            var _this = this;\r\n            var opts = this._moduleManager.getConfigurationOptions();\r\n            var nodeRequire = (opts.nodeRequire || global.nodeRequire);\r\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\r\n            this._init(nodeRequire);\r\n            if (/^node\\|/.test(scriptSrc)) {\r\n                var pieces = scriptSrc.split('|');\r\n                var moduleExports = null;\r\n                try {\r\n                    recorder.record(LoaderEventType.NodeBeginNativeRequire, pieces[2]);\r\n                    moduleExports = nodeRequire(pieces[2]);\r\n                }\r\n                catch (err) {\r\n                    recorder.record(LoaderEventType.NodeEndNativeRequire, pieces[2]);\r\n                    errorback(err);\r\n                    return;\r\n                }\r\n                recorder.record(LoaderEventType.NodeEndNativeRequire, pieces[2]);\r\n                this._moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports; });\r\n                callback();\r\n            }\r\n            else {\r\n                scriptSrc = Utilities.fileUriToFilePath(scriptSrc);\r\n                this._fs.readFile(scriptSrc, { encoding: 'utf8' }, function (err, data) {\r\n                    if (err) {\r\n                        errorback(err);\r\n                        return;\r\n                    }\r\n                    recorder.record(LoaderEventType.NodeBeginEvaluatingScript, scriptSrc);\r\n                    var vmScriptSrc = _this._path.normalize(scriptSrc);\r\n                    // Make the script src friendly towards electron\r\n                    if (isElectronRenderer) {\r\n                        var driveLetterMatch = vmScriptSrc.match(/^([a-z])\\:(.*)/);\r\n                        if (driveLetterMatch) {\r\n                            vmScriptSrc = driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2];\r\n                        }\r\n                        vmScriptSrc = 'file:///' + vmScriptSrc.replace(/\\\\/g, '/');\r\n                    }\r\n                    var contents, prefix = '(function (require, define, __filename, __dirname) { ', suffix = '\\n});';\r\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\r\n                        contents = prefix + data.substring(1) + suffix;\r\n                    }\r\n                    else {\r\n                        contents = prefix + data + suffix;\r\n                    }\r\n                    contents = nodeInstrumenter(contents, vmScriptSrc);\r\n                    var r;\r\n                    if (/^v0\\.12/.test(process.version)) {\r\n                        r = _this._vm.runInThisContext(contents, { filename: vmScriptSrc });\r\n                    }\r\n                    else {\r\n                        r = _this._vm.runInThisContext(contents, vmScriptSrc);\r\n                    }\r\n                    r.call(global, RequireFunc, DefineFunc, vmScriptSrc, _this._path.dirname(scriptSrc));\r\n                    recorder.record(LoaderEventType.NodeEndEvaluatingScript, scriptSrc);\r\n                    callback();\r\n                });\r\n            }\r\n        };\r\n        NodeScriptLoader._BOM = 0xFEFF;\r\n        return NodeScriptLoader;\r\n    }());\r\n    // ------------------------------------------------------------------------\r\n    // ------------------------------------------------------------------------\r\n    // ------------------------------------------------------------------------\r\n    // define\r\n    var DefineFunc = (function () {\r\n        function DefineFunc(id, dependencies, callback) {\r\n            if (typeof id !== 'string') {\r\n                callback = dependencies;\r\n                dependencies = id;\r\n                id = null;\r\n            }\r\n            if (typeof dependencies !== 'object' || !Utilities.isArray(dependencies)) {\r\n                callback = dependencies;\r\n                dependencies = null;\r\n            }\r\n            if (!dependencies) {\r\n                dependencies = ['require', 'exports', 'module'];\r\n            }\r\n            if (id) {\r\n                moduleManager.enqueueDefineModule(id, dependencies, callback);\r\n            }\r\n            else {\r\n                moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\r\n            }\r\n        }\r\n        DefineFunc.amd = {\r\n            jQuery: true\r\n        };\r\n        return DefineFunc;\r\n    }());\r\n    var RequireFunc = (function () {\r\n        function RequireFunc() {\r\n            if (arguments.length === 1) {\r\n                if ((arguments[0] instanceof Object) && !Utilities.isArray(arguments[0])) {\r\n                    RequireFunc.config(arguments[0]);\r\n                    return;\r\n                }\r\n                if (typeof arguments[0] === 'string') {\r\n                    return moduleManager.synchronousRequire(arguments[0]);\r\n                }\r\n            }\r\n            if (arguments.length === 2 || arguments.length === 3) {\r\n                if (Utilities.isArray(arguments[0])) {\r\n                    moduleManager.defineModule(Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\r\n                    return;\r\n                }\r\n            }\r\n            throw new Error('Unrecognized require call');\r\n        }\r\n        RequireFunc.config = function (params, shouldOverwrite) {\r\n            if (shouldOverwrite === void 0) { shouldOverwrite = false; }\r\n            moduleManager.configure(params, shouldOverwrite);\r\n        };\r\n        RequireFunc.getConfig = function () {\r\n            return moduleManager.getConfigurationOptions();\r\n        };\r\n        /**\r\n         * Non standard extension to reset completely the loader state. This is used for running amdjs tests\r\n         */\r\n        RequireFunc.reset = function () {\r\n            moduleManager = new ModuleManager(scriptLoader);\r\n            scriptLoader.setModuleManager(moduleManager);\r\n        };\r\n        /**\r\n         * Non standard extension to fetch loader state for building purposes.\r\n         */\r\n        RequireFunc.getBuildInfo = function () {\r\n            return moduleManager.getBuildInfo();\r\n        };\r\n        /**\r\n         * Non standard extension to fetch loader events\r\n         */\r\n        RequireFunc.getStats = function () {\r\n            return moduleManager.getLoaderEvents();\r\n        };\r\n        return RequireFunc;\r\n    }());\r\n    var global = _amdLoaderGlobal, hasPerformanceNow = (global.performance && typeof global.performance.now === 'function'), isWebWorker, isElectronRenderer, isElectronMain, isNode, scriptLoader, moduleManager, loaderAvailableTimestamp;\r\n    function initVars() {\r\n        isWebWorker = (typeof global.importScripts === 'function');\r\n        isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions['electron'] !== 'undefined' && process.type === 'renderer');\r\n        isElectronMain = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions['electron'] !== 'undefined' && process.type === 'browser');\r\n        isNode = (typeof module !== 'undefined' && !!module.exports);\r\n        if (isWebWorker) {\r\n            scriptLoader = new OnlyOnceScriptLoader(new WorkerScriptLoader());\r\n        }\r\n        else if (isNode) {\r\n            scriptLoader = new OnlyOnceScriptLoader(new NodeScriptLoader());\r\n        }\r\n        else {\r\n            scriptLoader = new OnlyOnceScriptLoader(new BrowserScriptLoader());\r\n        }\r\n        moduleManager = new ModuleManager(scriptLoader);\r\n        scriptLoader.setModuleManager(moduleManager);\r\n    }\r\n    function initConsole() {\r\n        // Define used console.* functions, in order to not fail in environments where they are not available\r\n        if (!isNode) {\r\n            if (!global.console) {\r\n                global.console = {};\r\n            }\r\n            if (!global.console.log) {\r\n                global.console.log = function () { };\r\n            }\r\n            if (!global.console.warn) {\r\n                global.console.warn = global.console.log;\r\n            }\r\n            if (!global.console.error) {\r\n                global.console.error = global.console.log;\r\n            }\r\n        }\r\n    }\r\n    function initMainScript() {\r\n        if (!isWebWorker && !isNode) {\r\n            window.onload = function () {\r\n                var i, len, main, scripts = document.getElementsByTagName('script');\r\n                // Look through all the scripts for the data-main attribute\r\n                for (i = 0, len = scripts.length; i < len; i++) {\r\n                    main = scripts[i].getAttribute('data-main');\r\n                    if (main) {\r\n                        break;\r\n                    }\r\n                }\r\n                // Load the main script\r\n                if (main) {\r\n                    moduleManager.defineModule(Utilities.generateAnonymousModule(), [main], null, null, null, new ModuleIdResolver(new Configuration(), ''));\r\n                }\r\n            };\r\n        }\r\n    }\r\n    function init() {\r\n        initVars();\r\n        initConsole();\r\n        initMainScript();\r\n        if (isNode) {\r\n            var _nodeRequire = (global.require || require);\r\n            var nodeRequire = function (what) {\r\n                moduleManager.getRecorder().record(LoaderEventType.NodeBeginNativeRequire, what);\r\n                var r = _nodeRequire(what);\r\n                moduleManager.getRecorder().record(LoaderEventType.NodeEndNativeRequire, what);\r\n                return r;\r\n            };\r\n            global.nodeRequire = nodeRequire;\r\n            RequireFunc.nodeRequire = nodeRequire;\r\n        }\r\n        if (isNode && !isElectronRenderer) {\r\n            module.exports = RequireFunc;\r\n            // These two defs are fore the local closure defined in node in the case that the loader is concatenated\r\n            define = function () {\r\n                DefineFunc.apply(null, arguments);\r\n            };\r\n            require = RequireFunc;\r\n        }\r\n        else {\r\n            // The global variable require can configure the loader\r\n            if (typeof global.require !== 'undefined' && typeof global.require !== 'function') {\r\n                RequireFunc.config(global.require);\r\n            }\r\n            if (!isElectronRenderer) {\r\n                global.define = DefineFunc;\r\n            }\r\n            else {\r\n                define = function () {\r\n                    DefineFunc.apply(null, arguments);\r\n                };\r\n            }\r\n            global.require = RequireFunc;\r\n            global.require.__$__nodeRequire = nodeRequire;\r\n        }\r\n    }\r\n    if (typeof global.define !== 'function' || !global.define.amd) {\r\n        init();\r\n        loaderAvailableTimestamp = getHighPerformanceTimestamp();\r\n    }\r\n})(AMDLoader || (AMDLoader = {}));\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/*---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar _cssPluginGlobal = this;\r\nvar CSSLoaderPlugin;\r\n(function (CSSLoaderPlugin) {\r\n    var global = _cssPluginGlobal;\r\n    /**\r\n     * Known issue:\r\n     * - In IE there is no way to know if the CSS file loaded successfully or not.\r\n     */\r\n    var BrowserCSSLoader = (function () {\r\n        function BrowserCSSLoader() {\r\n            this._pendingLoads = 0;\r\n        }\r\n        BrowserCSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\r\n            var unbind = function () {\r\n                linkNode.removeEventListener('load', loadEventListener);\r\n                linkNode.removeEventListener('error', errorEventListener);\r\n            };\r\n            var loadEventListener = function (e) {\r\n                unbind();\r\n                callback();\r\n            };\r\n            var errorEventListener = function (e) {\r\n                unbind();\r\n                errorback(e);\r\n            };\r\n            linkNode.addEventListener('load', loadEventListener);\r\n            linkNode.addEventListener('error', errorEventListener);\r\n        };\r\n        BrowserCSSLoader.prototype._onLoad = function (name, callback) {\r\n            this._pendingLoads--;\r\n            callback();\r\n        };\r\n        BrowserCSSLoader.prototype._onLoadError = function (name, errorback, err) {\r\n            this._pendingLoads--;\r\n            errorback(err);\r\n        };\r\n        BrowserCSSLoader.prototype._insertLinkNode = function (linkNode) {\r\n            this._pendingLoads++;\r\n            var head = document.head || document.getElementsByTagName('head')[0];\r\n            var other = head.getElementsByTagName('link') || document.head.getElementsByTagName('script');\r\n            if (other.length > 0) {\r\n                head.insertBefore(linkNode, other[other.length - 1]);\r\n            }\r\n            else {\r\n                head.appendChild(linkNode);\r\n            }\r\n        };\r\n        BrowserCSSLoader.prototype.createLinkTag = function (name, cssUrl, externalCallback, externalErrorback) {\r\n            var _this = this;\r\n            var linkNode = document.createElement('link');\r\n            linkNode.setAttribute('rel', 'stylesheet');\r\n            linkNode.setAttribute('type', 'text/css');\r\n            linkNode.setAttribute('data-name', name);\r\n            var callback = function () { return _this._onLoad(name, externalCallback); };\r\n            var errorback = function (err) { return _this._onLoadError(name, externalErrorback, err); };\r\n            this.attachListeners(name, linkNode, callback, errorback);\r\n            linkNode.setAttribute('href', cssUrl);\r\n            return linkNode;\r\n        };\r\n        BrowserCSSLoader.prototype._linkTagExists = function (name, cssUrl) {\r\n            var i, len, nameAttr, hrefAttr, links = document.getElementsByTagName('link');\r\n            for (i = 0, len = links.length; i < len; i++) {\r\n                nameAttr = links[i].getAttribute('data-name');\r\n                hrefAttr = links[i].getAttribute('href');\r\n                if (nameAttr === name || hrefAttr === cssUrl) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        BrowserCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\r\n            if (this._linkTagExists(name, cssUrl)) {\r\n                externalCallback();\r\n                return;\r\n            }\r\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\r\n            this._insertLinkNode(linkNode);\r\n        };\r\n        return BrowserCSSLoader;\r\n    }());\r\n    /**\r\n     * Prior to IE10, IE could not go above 31 stylesheets in a page\r\n     * http://blogs.msdn.com/b/ieinternals/archive/2011/05/14/internet-explorer-stylesheet-rule-selector-import-sheet-limit-maximum.aspx\r\n     *\r\n     * The general strategy here is to not write more than 31 link nodes to the page at the same time\r\n     * When stylesheets get loaded, they will get merged one into another to free up\r\n     * some positions for new link nodes.\r\n     */\r\n    var IE9CSSLoader = (function (_super) {\r\n        __extends(IE9CSSLoader, _super);\r\n        function IE9CSSLoader() {\r\n            _super.call(this);\r\n            this._blockedLoads = [];\r\n            this._mergeStyleSheetsTimeout = -1;\r\n        }\r\n        IE9CSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\r\n            if (this._linkTagExists(name, cssUrl)) {\r\n                externalCallback();\r\n                return;\r\n            }\r\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\r\n            if (this._styleSheetCount() < 31) {\r\n                this._insertLinkNode(linkNode);\r\n            }\r\n            else {\r\n                this._blockedLoads.push(linkNode);\r\n                this._handleBlocked();\r\n            }\r\n        };\r\n        IE9CSSLoader.prototype._styleSheetCount = function () {\r\n            var linkCount = document.getElementsByTagName('link').length;\r\n            var styleCount = document.getElementsByTagName('style').length;\r\n            return linkCount + styleCount;\r\n        };\r\n        IE9CSSLoader.prototype._onLoad = function (name, callback) {\r\n            _super.prototype._onLoad.call(this, name, callback);\r\n            this._handleBlocked();\r\n        };\r\n        IE9CSSLoader.prototype._onLoadError = function (name, errorback, err) {\r\n            _super.prototype._onLoadError.call(this, name, errorback, err);\r\n            this._handleBlocked();\r\n        };\r\n        IE9CSSLoader.prototype._handleBlocked = function () {\r\n            var _this = this;\r\n            var blockedLoadsCount = this._blockedLoads.length;\r\n            if (blockedLoadsCount > 0 && this._mergeStyleSheetsTimeout === -1) {\r\n                this._mergeStyleSheetsTimeout = window.setTimeout(function () { return _this._mergeStyleSheets(); }, 0);\r\n            }\r\n        };\r\n        IE9CSSLoader.prototype._mergeStyleSheet = function (dstPath, dst, srcPath, src) {\r\n            for (var i = src.rules.length - 1; i >= 0; i--) {\r\n                dst.insertRule(Utilities.rewriteUrls(srcPath, dstPath, src.rules[i].cssText), 0);\r\n            }\r\n        };\r\n        IE9CSSLoader.prototype._asIE9HTMLLinkElement = function (linkElement) {\r\n            return linkElement;\r\n        };\r\n        IE9CSSLoader.prototype._mergeStyleSheets = function () {\r\n            this._mergeStyleSheetsTimeout = -1;\r\n            var blockedLoadsCount = this._blockedLoads.length;\r\n            var i, linkDomNodes = document.getElementsByTagName('link');\r\n            var linkDomNodesCount = linkDomNodes.length;\r\n            var mergeCandidates = [];\r\n            for (i = 0; i < linkDomNodesCount; i++) {\r\n                if (linkDomNodes[i].readyState === 'loaded' || linkDomNodes[i].readyState === 'complete') {\r\n                    mergeCandidates.push({\r\n                        linkNode: linkDomNodes[i],\r\n                        rulesLength: this._asIE9HTMLLinkElement(linkDomNodes[i]).styleSheet.rules.length\r\n                    });\r\n                }\r\n            }\r\n            var mergeCandidatesCount = mergeCandidates.length;\r\n            // Just a little legend here :)\r\n            // - linkDomNodesCount: total number of link nodes in the DOM (this should be kept <= 31)\r\n            // - mergeCandidatesCount: loaded (finished) link nodes in the DOM (only these can be merged)\r\n            // - blockedLoadsCount: remaining number of load requests that did not fit in before (because of the <= 31 constraint)\r\n            // Now comes the heuristic part, we don't want to do too much work with the merging of styles,\r\n            // but we do need to merge stylesheets to free up loading slots.\r\n            var mergeCount = Math.min(Math.floor(mergeCandidatesCount / 2), blockedLoadsCount);\r\n            // Sort the merge candidates descending (least rules last)\r\n            mergeCandidates.sort(function (a, b) {\r\n                return b.rulesLength - a.rulesLength;\r\n            });\r\n            var srcIndex, dstIndex;\r\n            for (i = 0; i < mergeCount; i++) {\r\n                srcIndex = mergeCandidates.length - 1 - i;\r\n                dstIndex = i % (mergeCandidates.length - mergeCount);\r\n                // Merge rules of src into dst\r\n                this._mergeStyleSheet(mergeCandidates[dstIndex].linkNode.href, this._asIE9HTMLLinkElement(mergeCandidates[dstIndex].linkNode).styleSheet, mergeCandidates[srcIndex].linkNode.href, this._asIE9HTMLLinkElement(mergeCandidates[srcIndex].linkNode).styleSheet);\r\n                // Remove dom node of src\r\n                mergeCandidates[srcIndex].linkNode.parentNode.removeChild(mergeCandidates[srcIndex].linkNode);\r\n                linkDomNodesCount--;\r\n            }\r\n            var styleSheetCount = this._styleSheetCount();\r\n            while (styleSheetCount < 31 && this._blockedLoads.length > 0) {\r\n                this._insertLinkNode(this._blockedLoads.shift());\r\n                styleSheetCount++;\r\n            }\r\n        };\r\n        return IE9CSSLoader;\r\n    }(BrowserCSSLoader));\r\n    var IE8CSSLoader = (function (_super) {\r\n        __extends(IE8CSSLoader, _super);\r\n        function IE8CSSLoader() {\r\n            _super.call(this);\r\n        }\r\n        IE8CSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\r\n            linkNode.onload = function () {\r\n                linkNode.onload = null;\r\n                callback();\r\n            };\r\n        };\r\n        return IE8CSSLoader;\r\n    }(IE9CSSLoader));\r\n    var NodeCSSLoader = (function () {\r\n        function NodeCSSLoader() {\r\n            this.fs = require.nodeRequire('fs');\r\n        }\r\n        NodeCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\r\n            var contents = this.fs.readFileSync(cssUrl, 'utf8');\r\n            // Remove BOM\r\n            if (contents.charCodeAt(0) === NodeCSSLoader.BOM_CHAR_CODE) {\r\n                contents = contents.substring(1);\r\n            }\r\n            externalCallback(contents);\r\n        };\r\n        NodeCSSLoader.BOM_CHAR_CODE = 65279;\r\n        return NodeCSSLoader;\r\n    }());\r\n    // ------------------------------ Finally, the plugin\r\n    var CSSPlugin = (function () {\r\n        function CSSPlugin(cssLoader) {\r\n            this.cssLoader = cssLoader;\r\n        }\r\n        CSSPlugin.prototype.load = function (name, req, load, config) {\r\n            config = config || {};\r\n            var myConfig = config['vs/css'] || {};\r\n            if (myConfig.inlineResources) {\r\n                global.inlineResources = true;\r\n            }\r\n            var cssUrl = req.toUrl(name + '.css');\r\n            this.cssLoader.load(name, cssUrl, function (contents) {\r\n                // Contents has the CSS file contents if we are in a build\r\n                if (config.isBuild) {\r\n                    CSSPlugin.BUILD_MAP[name] = contents;\r\n                    CSSPlugin.BUILD_PATH_MAP[name] = cssUrl;\r\n                }\r\n                load({});\r\n            }, function (err) {\r\n                if (typeof load.error === 'function') {\r\n                    load.error('Could not find ' + cssUrl + ' or it was empty');\r\n                }\r\n            });\r\n        };\r\n        CSSPlugin.prototype.write = function (pluginName, moduleName, write) {\r\n            // getEntryPoint is a Monaco extension to r.js\r\n            var entryPoint = write.getEntryPoint();\r\n            // r.js destroys the context of this plugin between calling 'write' and 'writeFile'\r\n            // so the only option at this point is to leak the data to a global\r\n            global.cssPluginEntryPoints = global.cssPluginEntryPoints || {};\r\n            global.cssPluginEntryPoints[entryPoint] = global.cssPluginEntryPoints[entryPoint] || [];\r\n            global.cssPluginEntryPoints[entryPoint].push({\r\n                moduleName: moduleName,\r\n                contents: CSSPlugin.BUILD_MAP[moduleName],\r\n                fsPath: CSSPlugin.BUILD_PATH_MAP[moduleName],\r\n            });\r\n            write.asModule(pluginName + '!' + moduleName, 'define([\\'vs/css!' + entryPoint + '\\'], {});');\r\n        };\r\n        CSSPlugin.prototype.writeFile = function (pluginName, moduleName, req, write, config) {\r\n            if (global.cssPluginEntryPoints && global.cssPluginEntryPoints.hasOwnProperty(moduleName)) {\r\n                var fileName = req.toUrl(moduleName + '.css');\r\n                var contents = [\r\n                    '/*---------------------------------------------------------',\r\n                    ' * Copyright (c) Microsoft Corporation. All rights reserved.',\r\n                    ' *--------------------------------------------------------*/'\r\n                ], entries = global.cssPluginEntryPoints[moduleName];\r\n                for (var i = 0; i < entries.length; i++) {\r\n                    if (global.inlineResources) {\r\n                        contents.push(Utilities.rewriteOrInlineUrls(entries[i].fsPath, entries[i].moduleName, moduleName, entries[i].contents));\r\n                    }\r\n                    else {\r\n                        contents.push(Utilities.rewriteUrls(entries[i].moduleName, moduleName, entries[i].contents));\r\n                    }\r\n                }\r\n                write(fileName, contents.join('\\r\\n'));\r\n            }\r\n        };\r\n        CSSPlugin.prototype.getInlinedResources = function () {\r\n            return global.cssInlinedResources || [];\r\n        };\r\n        CSSPlugin.BUILD_MAP = {};\r\n        CSSPlugin.BUILD_PATH_MAP = {};\r\n        return CSSPlugin;\r\n    }());\r\n    CSSLoaderPlugin.CSSPlugin = CSSPlugin;\r\n    var Utilities = (function () {\r\n        function Utilities() {\r\n        }\r\n        Utilities.startsWith = function (haystack, needle) {\r\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\r\n        };\r\n        /**\r\n         * Find the path of a file.\r\n         */\r\n        Utilities.pathOf = function (filename) {\r\n            var lastSlash = filename.lastIndexOf('/');\r\n            if (lastSlash !== -1) {\r\n                return filename.substr(0, lastSlash + 1);\r\n            }\r\n            else {\r\n                return '';\r\n            }\r\n        };\r\n        /**\r\n         * A conceptual a + b for paths.\r\n         * Takes into account if `a` contains a protocol.\r\n         * Also normalizes the result: e.g.: a/b/ + ../c => a/c\r\n         */\r\n        Utilities.joinPaths = function (a, b) {\r\n            function findSlashIndexAfterPrefix(haystack, prefix) {\r\n                if (Utilities.startsWith(haystack, prefix)) {\r\n                    return Math.max(prefix.length, haystack.indexOf('/', prefix.length));\r\n                }\r\n                return 0;\r\n            }\r\n            var aPathStartIndex = 0;\r\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, '//');\r\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'http://');\r\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'https://');\r\n            function pushPiece(pieces, piece) {\r\n                if (piece === './') {\r\n                    // Ignore\r\n                    return;\r\n                }\r\n                if (piece === '../') {\r\n                    var prevPiece = (pieces.length > 0 ? pieces[pieces.length - 1] : null);\r\n                    if (prevPiece && prevPiece === '/') {\r\n                        // Ignore\r\n                        return;\r\n                    }\r\n                    if (prevPiece && prevPiece !== '../') {\r\n                        // Pop\r\n                        pieces.pop();\r\n                        return;\r\n                    }\r\n                }\r\n                // Push\r\n                pieces.push(piece);\r\n            }\r\n            function push(pieces, path) {\r\n                while (path.length > 0) {\r\n                    var slashIndex = path.indexOf('/');\r\n                    var piece = (slashIndex >= 0 ? path.substring(0, slashIndex + 1) : path);\r\n                    path = (slashIndex >= 0 ? path.substring(slashIndex + 1) : '');\r\n                    pushPiece(pieces, piece);\r\n                }\r\n            }\r\n            var pieces = [];\r\n            push(pieces, a.substr(aPathStartIndex));\r\n            if (b.length > 0 && b.charAt(0) === '/') {\r\n                pieces = [];\r\n            }\r\n            push(pieces, b);\r\n            return a.substring(0, aPathStartIndex) + pieces.join('');\r\n        };\r\n        Utilities.commonPrefix = function (str1, str2) {\r\n            var len = Math.min(str1.length, str2.length);\r\n            for (var i = 0; i < len; i++) {\r\n                if (str1.charCodeAt(i) !== str2.charCodeAt(i)) {\r\n                    break;\r\n                }\r\n            }\r\n            return str1.substring(0, i);\r\n        };\r\n        Utilities.commonFolderPrefix = function (fromPath, toPath) {\r\n            var prefix = Utilities.commonPrefix(fromPath, toPath);\r\n            var slashIndex = prefix.lastIndexOf('/');\r\n            if (slashIndex === -1) {\r\n                return '';\r\n            }\r\n            return prefix.substring(0, slashIndex + 1);\r\n        };\r\n        Utilities.relativePath = function (fromPath, toPath) {\r\n            if (Utilities.startsWith(toPath, '/') || Utilities.startsWith(toPath, 'http://') || Utilities.startsWith(toPath, 'https://')) {\r\n                return toPath;\r\n            }\r\n            // Ignore common folder prefix\r\n            var prefix = Utilities.commonFolderPrefix(fromPath, toPath);\r\n            fromPath = fromPath.substr(prefix.length);\r\n            toPath = toPath.substr(prefix.length);\r\n            var upCount = fromPath.split('/').length;\r\n            var result = '';\r\n            for (var i = 1; i < upCount; i++) {\r\n                result += '../';\r\n            }\r\n            return result + toPath;\r\n        };\r\n        Utilities._replaceURL = function (contents, replacer) {\r\n            // Use \")\" as the terminator as quotes are oftentimes not used at all\r\n            return contents.replace(/url\\(\\s*([^\\)]+)\\s*\\)?/g, function (_) {\r\n                var matches = [];\r\n                for (var _i = 1; _i < arguments.length; _i++) {\r\n                    matches[_i - 1] = arguments[_i];\r\n                }\r\n                var url = matches[0];\r\n                // Eliminate starting quotes (the initial whitespace is not captured)\r\n                if (url.charAt(0) === '\"' || url.charAt(0) === '\\'') {\r\n                    url = url.substring(1);\r\n                }\r\n                // The ending whitespace is captured\r\n                while (url.length > 0 && (url.charAt(url.length - 1) === ' ' || url.charAt(url.length - 1) === '\\t')) {\r\n                    url = url.substring(0, url.length - 1);\r\n                }\r\n                // Eliminate ending quotes\r\n                if (url.charAt(url.length - 1) === '\"' || url.charAt(url.length - 1) === '\\'') {\r\n                    url = url.substring(0, url.length - 1);\r\n                }\r\n                if (!Utilities.startsWith(url, 'data:') && !Utilities.startsWith(url, 'http://') && !Utilities.startsWith(url, 'https://')) {\r\n                    url = replacer(url);\r\n                }\r\n                return 'url(' + url + ')';\r\n            });\r\n        };\r\n        Utilities.rewriteUrls = function (originalFile, newFile, contents) {\r\n            return this._replaceURL(contents, function (url) {\r\n                var absoluteUrl = Utilities.joinPaths(Utilities.pathOf(originalFile), url);\r\n                return Utilities.relativePath(newFile, absoluteUrl);\r\n            });\r\n        };\r\n        Utilities.rewriteOrInlineUrls = function (originalFileFSPath, originalFile, newFile, contents) {\r\n            var fs = require.nodeRequire('fs');\r\n            var path = require.nodeRequire('path');\r\n            return this._replaceURL(contents, function (url) {\r\n                if (/\\.(svg|png)$/.test(url)) {\r\n                    var fsPath = path.join(path.dirname(originalFileFSPath), url);\r\n                    var fileContents = fs.readFileSync(fsPath);\r\n                    if (fileContents.length < 3000) {\r\n                        global.cssInlinedResources = global.cssInlinedResources || [];\r\n                        var normalizedFSPath = fsPath.replace(/\\\\/g, '/');\r\n                        if (global.cssInlinedResources.indexOf(normalizedFSPath) >= 0) {\r\n                            console.warn('CSS INLINING IMAGE AT ' + fsPath + ' MORE THAN ONCE. CONSIDER CONSOLIDATING CSS RULES');\r\n                        }\r\n                        global.cssInlinedResources.push(normalizedFSPath);\r\n                        var MIME = /\\.svg$/.test(url) ? 'image/svg+xml' : 'image/png';\r\n                        var DATA = ';base64,' + fileContents.toString('base64');\r\n                        if (/\\.svg$/.test(url)) {\r\n                            // .svg => url encode as explained at https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\r\n                            var newText = fileContents.toString()\r\n                                .replace(/\"/g, '\\'')\r\n                                .replace(/</g, '%3C')\r\n                                .replace(/>/g, '%3E')\r\n                                .replace(/&/g, '%26')\r\n                                .replace(/#/g, '%23')\r\n                                .replace(/\\s+/g, ' ');\r\n                            var encodedData = ',' + newText;\r\n                            if (encodedData.length < DATA.length) {\r\n                                DATA = encodedData;\r\n                            }\r\n                        }\r\n                        return '\"data:' + MIME + DATA + '\"';\r\n                    }\r\n                }\r\n                var absoluteUrl = Utilities.joinPaths(Utilities.pathOf(originalFile), url);\r\n                return Utilities.relativePath(newFile, absoluteUrl);\r\n            });\r\n        };\r\n        return Utilities;\r\n    }());\r\n    CSSLoaderPlugin.Utilities = Utilities;\r\n    (function () {\r\n        var cssLoader = null;\r\n        var isElectron = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions['electron'] !== 'undefined');\r\n        if (typeof process !== 'undefined' && process.versions && !!process.versions.node && !isElectron) {\r\n            cssLoader = new NodeCSSLoader();\r\n        }\r\n        else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('MSIE 9') >= 0) {\r\n            cssLoader = new IE9CSSLoader();\r\n        }\r\n        else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('MSIE 8') >= 0) {\r\n            cssLoader = new IE8CSSLoader();\r\n        }\r\n        else {\r\n            cssLoader = new BrowserCSSLoader();\r\n        }\r\n        define('vs/css', new CSSPlugin(cssLoader));\r\n    })();\r\n})(CSSLoaderPlugin || (CSSLoaderPlugin = {}));\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/*---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nvar _nlsPluginGlobal = this;\r\nvar NLSLoaderPlugin;\r\n(function (NLSLoaderPlugin) {\r\n    var global = _nlsPluginGlobal;\r\n    var Resources = global.Plugin && global.Plugin.Resources ? global.Plugin.Resources : undefined;\r\n    var DEFAULT_TAG = 'i-default';\r\n    var IS_PSEUDO = (global && global.document && global.document.location && global.document.location.hash.indexOf('pseudo=true') >= 0);\r\n    var slice = Array.prototype.slice;\r\n    function _format(message, args) {\r\n        var result;\r\n        if (args.length === 0) {\r\n            result = message;\r\n        }\r\n        else {\r\n            result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\r\n                var index = rest[0];\r\n                return typeof args[index] !== 'undefined' ? args[index] : match;\r\n            });\r\n        }\r\n        if (IS_PSEUDO) {\r\n            // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\r\n            result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\r\n        }\r\n        return result;\r\n    }\r\n    function findLanguageForModule(config, name) {\r\n        var result = config[name];\r\n        if (result)\r\n            return result;\r\n        result = config['*'];\r\n        if (result)\r\n            return result;\r\n        return null;\r\n    }\r\n    function localize(data, message) {\r\n        var args = [];\r\n        for (var _i = 0; _i < (arguments.length - 2); _i++) {\r\n            args[_i] = arguments[_i + 2];\r\n        }\r\n        return _format(message, args);\r\n    }\r\n    function createScopedLocalize(scope) {\r\n        return function (idx, defaultValue) {\r\n            var restArgs = slice.call(arguments, 2);\r\n            return _format(scope[idx], restArgs);\r\n        };\r\n    }\r\n    var NLSPlugin = (function () {\r\n        function NLSPlugin() {\r\n            this.localize = localize;\r\n        }\r\n        NLSPlugin.prototype.setPseudoTranslation = function (value) {\r\n            IS_PSEUDO = value;\r\n        };\r\n        NLSPlugin.prototype.create = function (key, data) {\r\n            return {\r\n                localize: createScopedLocalize(data[key])\r\n            };\r\n        };\r\n        NLSPlugin.prototype.load = function (name, req, load, config) {\r\n            config = config || {};\r\n            if (!name || name.length === 0) {\r\n                load({\r\n                    localize: localize\r\n                });\r\n            }\r\n            else {\r\n                var suffix = void 0;\r\n                if (Resources && Resources.getString) {\r\n                    suffix = '.nls.keys';\r\n                    req([name + suffix], function (keyMap) {\r\n                        load({\r\n                            localize: function (moduleKey, index) {\r\n                                if (!keyMap[moduleKey])\r\n                                    return 'NLS error: unknown key ' + moduleKey;\r\n                                var mk = keyMap[moduleKey].keys;\r\n                                if (index >= mk.length)\r\n                                    return 'NLS error unknow index ' + index;\r\n                                var subKey = mk[index];\r\n                                var args = [];\r\n                                args[0] = moduleKey + '_' + subKey;\r\n                                for (var _i = 0; _i < (arguments.length - 2); _i++) {\r\n                                    args[_i + 1] = arguments[_i + 2];\r\n                                }\r\n                                return Resources.getString.apply(Resources, args);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    if (config.isBuild) {\r\n                        req([name + '.nls', name + '.nls.keys'], function (messages, keys) {\r\n                            NLSPlugin.BUILD_MAP[name] = messages;\r\n                            NLSPlugin.BUILD_MAP_KEYS[name] = keys;\r\n                            load(messages);\r\n                        });\r\n                    }\r\n                    else {\r\n                        var pluginConfig = config['vs/nls'] || {};\r\n                        var language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\r\n                        suffix = '.nls';\r\n                        if (language !== null && language !== DEFAULT_TAG) {\r\n                            suffix = suffix + '.' + language;\r\n                        }\r\n                        req([name + suffix], function (messages) {\r\n                            if (Array.isArray(messages)) {\r\n                                messages.localize = createScopedLocalize(messages);\r\n                            }\r\n                            else {\r\n                                messages.localize = createScopedLocalize(messages[name]);\r\n                            }\r\n                            load(messages);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        NLSPlugin.prototype._getEntryPointsMap = function () {\r\n            global.nlsPluginEntryPoints = global.nlsPluginEntryPoints || {};\r\n            return global.nlsPluginEntryPoints;\r\n        };\r\n        NLSPlugin.prototype.write = function (pluginName, moduleName, write) {\r\n            // getEntryPoint is a Monaco extension to r.js\r\n            var entryPoint = write.getEntryPoint();\r\n            // r.js destroys the context of this plugin between calling 'write' and 'writeFile'\r\n            // so the only option at this point is to leak the data to a global\r\n            var entryPointsMap = this._getEntryPointsMap();\r\n            entryPointsMap[entryPoint] = entryPointsMap[entryPoint] || [];\r\n            entryPointsMap[entryPoint].push(moduleName);\r\n            if (moduleName !== entryPoint) {\r\n                write.asModule(pluginName + '!' + moduleName, 'define([\\'vs/nls\\', \\'vs/nls!' + entryPoint + '\\'], function(nls, data) { return nls.create(\"' + moduleName + '\", data); });');\r\n            }\r\n        };\r\n        NLSPlugin.prototype.writeFile = function (pluginName, moduleName, req, write, config) {\r\n            var entryPointsMap = this._getEntryPointsMap();\r\n            if (entryPointsMap.hasOwnProperty(moduleName)) {\r\n                var fileName = req.toUrl(moduleName + '.nls.js');\r\n                var contents = [\r\n                    '/*---------------------------------------------------------',\r\n                    ' * Copyright (c) Microsoft Corporation. All rights reserved.',\r\n                    ' *--------------------------------------------------------*/'\r\n                ], entries = entryPointsMap[moduleName];\r\n                var data = {};\r\n                for (var i = 0; i < entries.length; i++) {\r\n                    data[entries[i]] = NLSPlugin.BUILD_MAP[entries[i]];\r\n                }\r\n                contents.push('define(\"' + moduleName + '.nls\", ' + JSON.stringify(data, null, '\\t') + ');');\r\n                write(fileName, contents.join('\\r\\n'));\r\n            }\r\n        };\r\n        NLSPlugin.prototype.finishBuild = function (write) {\r\n            write('nls.metadata.json', JSON.stringify({\r\n                keys: NLSPlugin.BUILD_MAP_KEYS,\r\n                messages: NLSPlugin.BUILD_MAP,\r\n                bundles: this._getEntryPointsMap()\r\n            }, null, '\\t'));\r\n        };\r\n        ;\r\n        NLSPlugin.BUILD_MAP = {};\r\n        NLSPlugin.BUILD_MAP_KEYS = {};\r\n        return NLSPlugin;\r\n    }());\r\n    NLSLoaderPlugin.NLSPlugin = NLSPlugin;\r\n    (function () {\r\n        define('vs/nls', new NLSPlugin());\r\n    })();\r\n})(NLSLoaderPlugin || (NLSLoaderPlugin = {}));\r\n"]}