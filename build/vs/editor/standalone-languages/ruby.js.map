{"version":3,"sources":["fake","file:///C:/REPOS/monaco/vscode/src/vs/editor/standalone-languages/ruby.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;;;gGAGgG;;IAEhG,YAAY,CAAC;IAKF,YAAI,GAA8B;QAC5C,QAAQ,EAAE;YACT,WAAW,EAAE,GAAG;YAChB,YAAY,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;SAChC;QACD,QAAQ,EAAE,CAAC,CAAC,GAAG,EAAC,GAAG,CAAC,EAAC,CAAC,GAAG,EAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;QAC1C,gBAAgB,EAAE;YACjB,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE;YACvD,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE;YACzD,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE;YACvD,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE;YACvD,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE;SACvD;QACD,0BAA0B,EAAE;YAC3B,8BAA8B;YAC9B,0BAA0B,EAAE,CAAC,GAAG,CAAC;SACjC;KACD,CAAC;IAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+CG;IAEQ,gBAAQ,GAAe;QACjC,YAAY,EAAE,OAAO;QAErB,QAAQ,EAAE;YACT,UAAU,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO;YAC/E,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK;YACzE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM;YAClF,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ;YAC/E,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO;SACjC;QAED,UAAU,EAAE;YACX,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;SACjC;QAED,QAAQ,EAAE;YACT,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa;YAClE,WAAW,EAAE,sBAAsB,EAAE,wBAAwB,EAAE,KAAK;SACpE;QAED,yEAAyE;QACzE,YAAY,EAAE;YACb,QAAQ,EAAC,OAAO,EAAC,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,OAAO,EAAC,KAAK,EAAC,IAAI,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ;SAC9E;QAED,SAAS,EAAE;YACV,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,OAAO,EAAC,KAAK,EAAC,IAAI,EAAC,OAAO,EAAC,OAAO,EAAC,QAAQ;SAC7D;QAED,SAAS,EAAE;YACV,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG;YACpF,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;YAC3D,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI;SACjF;QAED,QAAQ,EAAE;YACT,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,uBAAuB,EAAC;YACxD,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,iBAAiB,EAAC;YAClD,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,kBAAkB,EAAC;SACnD;QAED,8CAA8C;QAC9C,OAAO,EAAG,yBAAyB;QAEnC,mBAAmB;QACnB,MAAM,EAAG,sEAAsE;QAC/E,OAAO,EAAE,2CAA2C;QAEpD,OAAO,EAAE,WAAW;QACpB,OAAO,EAAE,YAAY;QAErB,KAAK,EAAM,oBAAoB;QAC/B,SAAS,EAAE,iCAAiC;QAE5C,SAAS,EAAE,wBAAwB;QACnC,SAAS,EAAE,kFAAkF;QAG7F,uCAAuC;QACvC,SAAS,EAAE;YACV,cAAc;YACd,2EAA2E;YAC3E,IAAI,EAAE;gBACL,2BAA2B;gBAC3B,6EAA6E;gBAC7E,kIAAkI;gBAClI,CAAC,yBAAyB,EAAE,CAAC,OAAO;wBACnC,EAAE,KAAK,EAAE,EAAE,iBAAiB,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE;gCACxF,eAAe,EAAI,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE;gCAC9E,KAAK,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;gCAChE,WAAW,EAAE,SAAS;gCACtB,WAAW,EAAE,YAAY;gCACzB,UAAU,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;gBAClC,CAAC,iBAAiB;oBACjB,EAAE,KAAK,EAAE,EAAE,uBAAuB,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE;4BAClG,KAAK,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE;4BACpE,YAAY,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE;4BACzE,KAAK,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;4BAChE,WAAW,EAAE,SAAS;4BACtB,WAAW,EAAE,YAAY;4BACzB,UAAU,EAAE,YAAY,EAAE,EAAE,CAAC;gBAEjC,CAAC,kBAAkB,EAAE,wBAAwB,CAAE;gBAC/C,CAAC,SAAS,EAAK,iBAAiB,CAAE;gBAClC,CAAC,QAAQ,EAAM,+BAA+B,CAAE;gBAChD,CAAC,SAAS,EAAK,4BAA4B,CAAE;gBAE7C,gBAAgB;gBAChB,CAAC,mBAAmB,EAAE,EAAE,KAAK,EAAE,0BAA0B,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,CAAE;gBACpG,CAAC,4BAA4B,EAAE,EAAE,KAAK,EAAE,0BAA0B,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,CAAE;gBAC7G,CAAC,mBAAmB,EAAE,EAAE,KAAK,EAAE,0BAA0B,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,CAAE;gBAGpG,aAAa;gBACb,EAAE,OAAO,EAAE,aAAa,EAAE;gBAE1B,UAAU;gBACV,CAAC,GAAG,EAAG,EAAE,KAAK,EAAE,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAC,CAAE;gBAC3E,CAAC,GAAG,EAAG,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,CAAE;gBAE5E,6DAA6D;gBAC7D,CAAC,gBAAgB,EAAG,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,CAAE;gBAE5D,uBAAuB;gBACvB,CAAC,GAAG,EAAG,EAAE,KAAK,EAAE,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,CAAE;gBAC5E,CAAC,qBAAqB,EAAE,UAAU,CAAC;gBACnC,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,CAAE;gBAC5E,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,CAAE;gBAE1E,2FAA2F;gBAC3F,CAAC,yBAAyB,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,CAAE;gBAE1F,2BAA2B;gBAC3B,CAAC,YAAY,EAAE,WAAW,CAAC;gBAC3B,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,EAAE,aAAa,EAAE,SAAS;4BAC1C,YAAY,EAAG,UAAU;4BACzB,UAAU,EAAK,EAAE,EAAE,EAAE,CAAE;gBAE7B,CAAC,MAAM,EAAE,WAAW,CAAC;gBAErB,UAAU;gBACV,CAAC,kCAAkC,EAAE,YAAY,CAAC;gBAClD,CAAC,uBAAuB,EAAE,cAAc,CAAC;gBACzC,CAAC,oBAAoB,EAAE,eAAe,CAAC;gBACvC,CAAC,eAAe,EAAE,QAAQ,CAAC;gBAC3B,CAAC,8CAA8C,EAAE,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,cAAc;4BACjE,UAAU,EAAE,QAAQ,EAAE,EAAC,CAAC;aAEvC;YAED,sEAAsE;YACtE,8CAA8C;YAC9C,qEAAqE;YACrE,MAAM,EAAE;gBACP,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;gBAC3C,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;4BACvF,IAAI,EAAG,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE;4BAClD,YAAY,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE;4BAC1D,WAAW,EAAE,SAAS;4BACtB,WAAW,EAAE,YAAY;4BACzB,UAAU,EAAE,YAAY,EAAE,EAAE,CAAC;gBACrC,EAAE,OAAO,EAAE,OAAO,EAAE;aACpB;YAED,yEAAyE;YACzE,uBAAuB;YACvB,oEAAoE;YACpE,QAAQ,EAAE;gBACT,CAAC,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC;gBACjB,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;4BACvF,oBAAoB,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE;4BACjE,YAAY,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE;4BAC1D,WAAW,EAAE,SAAS;4BACtB,WAAW,EAAE,YAAY;4BACzB,UAAU,EAAE,YAAY,EAAE,EAAE,CAAC;gBACrC,EAAE,OAAO,EAAE,OAAO,EAAE;aACpB;YAED,+CAA+C;YAC/C,oEAAoE;YACpE,OAAO,EAAE;gBACR,CAAC,SAAS,EAAO,YAAY,CAAE;gBAC/B,CAAC,cAAc,EAAE,mBAAmB,CAAC;gBACrC,CAAC,KAAK,EAAW,oBAAoB,CAAC;gBACtC,CAAC,GAAG,EAAa,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAC,CAAE;aAChF;YAED,0BAA0B;YAC1B,2FAA2F;YAC3F,6CAA6C;YAC7C,OAAO,EAAE;gBACR,CAAC,WAAW,EAAE,YAAY,CAAC;gBAC3B,CAAC,GAAG,EAAU,mBAAmB,EAAE,eAAe,CAAE;gBACpD,CAAC,KAAK,EAAQ,mBAAmB,CAAE;gBACnC,CAAC,UAAU,EAAG,mBAAmB,CAAC;gBAClC,CAAC,KAAK,EAAQ,2BAA2B,CAAC;gBAC1C,CAAC,MAAM,EAAO,EAAE,KAAK,EAAE,EAAE,SAAS,EAAG,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAC;4BAC3F,UAAU,EAAE,YAAY,EAAE,EAAE,CAAE;aACrC;YAED,oBAAoB;YACpB,uDAAuD;YACvD,OAAO,EAAE;gBACR,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,0BAA0B,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;4BAC/H,UAAU,EAAE,CAAC,gBAAgB,EAAC,gBAAgB,CAAC,EAAE,EAAC,CAAC;gBAC5D,CAAC,IAAI,EAAE,gBAAgB,CAAE;aACzB;YAED,wBAAwB;YACxB,YAAY,EAAE;gBACb,CAAC,OAAO,EAAO,iBAAiB,EAAE,MAAM,CAAE;gBAC1C,CAAC,MAAM,EAAQ,4BAA4B,EAAE,MAAM,CAAE;gBACrD,CAAC,OAAO,EAAO,+BAA+B,EAAE,MAAM,CAAE;gBACxD,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,qBAAqB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,wBAAwB,EAAE,CAAC;gBAC/F,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,CAAE;aACjB;YAED,WAAW;YACX,qBAAqB,EAAE;gBACtB,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,qBAAqB,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAC,CAAE;gBAC1E,EAAE,OAAO,EAAE,OAAO,EAAE;aACpB;YAED,mBAAmB;YACnB,uEAAuE;YACvE,OAAO,EAAE;gBACR,EAAE,OAAO,EAAE,aAAa,EAAE;gBAC1B,sEAAsE;gBACtE,wEAAwE;gBACxE,mCAAmC;gBACnC,CAAC,aAAa,EAAE,EAAE,KAAK,EAAE,EAAE,SAAS,EAAG,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;4BAC1F,SAAS,EAAG,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE;4BACtE,UAAU,EAAG,iCAAiC;4BAC9C,aAAa,EAAE,uBAAuB;4BACtC,UAAU,EAAE,QAAQ,EAAE,EAAC,CAAC;gBAC/B,EAAE,OAAO,EAAE,eAAe,EAAE;aAC5B;YAED,8CAA8C;YAC9C,MAAM,EAAE;gBACP,EAAE,OAAO,EAAI,eAAe,EAAE;gBAC9B,CAAC,SAAS,EAAG,QAAQ,CAAE;gBACvB,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAC,EAAE,MAAM,CAAE;aAClE;YAED,YAAY,EAAE;gBACb,CAAC,wBAAwB,EAAE,CAAC,iCAAiC,EAAE,uBAAuB,EAAE,iCAAiC,CAAC,CAAE;gBAC5H,CAAC,WAAW,EAAM,CAAC,iCAAiC,EAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,IAAI,EAAE,aAAa,EAAC,CAAC,CAAC;gBAC7G,CAAC,eAAe,EAAE,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAE;gBAChF,CAAC,OAAO,EAAU,EAAE,KAAK,EAAE,uBAAuB,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;gBAC/F,CAAC,MAAM,EAAS,iCAAiC,CAAC;gBAClD,CAAC,YAAY,EAAG,uBAAuB,CAAC;gBACxC,CAAC,KAAK,EAAU,eAAe,CAAE;gBACjC,CAAC,YAAY,EAAG,eAAe,CAAE;gBACjC,CAAC,MAAM,EAAS,gBAAgB,CAAE;gBAClC,CAAC,GAAG,EAAY,eAAe,EAAE,eAAe,CAAE;aAClD;YAED,UAAU,EAAE;gBACX,CAAC,GAAG,EAAM,uBAAuB,CAAC;gBAClC,CAAC,IAAI,EAAK,gBAAgB,CAAC;gBAC3B,CAAC,KAAK,EAAI,eAAe,CAAE;gBAC3B,CAAC,YAAY,EAAE,eAAe,CAAC;gBAC/B,CAAC,OAAO,EAAE,QAAQ,CAAC;gBACnB,CAAC,IAAI,EAAK,iCAAiC,EAAE,MAAM,CAAC;aACpD;YAED,aAAa,EAAE;gBACd,CAAE,OAAO,EAAE,SAAS,CAAE;gBACtB,CAAE,IAAI,EAAE,EAAE,KAAK,EAAE,uBAAuB,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAE;aAC7E;YAGD,mBAAmB;YACnB,oFAAoF;YACpF,OAAO,EAAE;gBACR,CAAC,YAAY,EAAG,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,CAAE;gBAC7F,CAAC,YAAY,EAAG,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,CAAE;gBAC7F,CAAC,YAAY,EAAG,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,CAAE;gBAC7F,CAAC,WAAW,EAAI,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,CAAE;gBAC7F,CAAC,kBAAkB,EAAE,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,CAAE;gBAEpG,CAAC,MAAM,EAAG,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAE;gBACjF,CAAC,MAAM,EAAG,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAE;gBACjF,CAAC,MAAM,EAAG,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAE;gBACjF,CAAC,KAAK,EAAI,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAE;gBACjF,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAE;gBAExF,CAAC,aAAa,EAAG,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAE;gBAC/F,CAAC,aAAa,EAAG,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAE;gBAC/F,CAAC,aAAa,EAAG,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAE;gBAC/F,CAAC,YAAY,EAAI,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAE;gBAC/F,CAAC,mBAAmB,EAAE,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,oBAAoB,EAAE,CAAE;gBAEtG,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,CAAE;gBACxD,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,CAAE;aAC1C;YAED,8BAA8B;YAC9B,gCAAgC;YAChC,+CAA+C;YAC/C,yBAAyB;YACzB,2BAA2B;YAC3B,OAAO,EAAE;gBACR,CAAC,KAAK,EAAE,mBAAmB,CAAE;gBAC7B,CAAC,KAAK,EAAE,mBAAmB,CAAE;gBAC7B,CAAC,GAAG,EAAI,EAAE,KAAK,EAAE,EAAE,SAAS,EAAG,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;4BACxF,SAAS,EAAG,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE;4BAC1E,UAAU,EAAE,YAAY,EAAE,EAAC,CAAC;aACjC;YAED,0BAA0B;YAC1B,iCAAiC;YACjC,gDAAgD;YAChD,yBAAyB;YACzB,2BAA2B;YAC3B,QAAQ,EAAE;gBACT,CAAC,GAAG,EAAE,mBAAmB,EAAE,eAAe,CAAE;gBAC5C,EAAE,OAAO,EAAE,UAAU,EAAE;aACvB;YAGD,wBAAwB;YACxB,UAAU,EAAE;gBACX,CAAC,YAAY,EAAE,EAAE,CAAC;gBAClB,CAAC,cAAc,EAAQ,SAAS,EAAE,UAAU,CAAE;gBAC9C,CAAC,MAAM,EAAK,SAAS,CAAC;aACtB;YAED,OAAO,EAAE;gBACR,CAAC,OAAO,EAAE,SAAS,CAAE;gBACrB,CAAC,cAAc,EAAE,iBAAiB,CAAE;gBACpC,CAAC,cAAc,EAAE,SAAS,EAAE,MAAM,CAAG;gBACrC,CAAC,KAAK,EAAE,SAAS,CAAE;aACnB;SACD;KACD,CAAC;;;AD1YF","file":"vs/editor/standalone-languages/ruby.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n'use strict';\r\n\r\nimport IRichLanguageConfiguration = monaco.languages.LanguageConfiguration;\r\nimport ILanguage = monaco.languages.IMonarchLanguage;\r\n\r\nexport var conf:IRichLanguageConfiguration = {\r\n\tcomments: {\r\n\t\tlineComment: '#',\r\n\t\tblockComment: ['=begin', '=end'],\r\n\t},\r\n\tbrackets: [['(',')'],['{','}'], ['[',']']],\r\n\tautoClosingPairs: [\r\n\t\t{ open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n\t\t{ open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\r\n\t\t{ open: '(', close: ')', notIn: ['string', 'comment'] },\r\n\t\t{ open: '{', close: '}', notIn: ['string', 'comment'] },\r\n\t\t{ open: '[', close: ']', notIn: ['string', 'comment'] },\r\n\t],\r\n\t__electricCharacterSupport: {\r\n\t\t// trigger outdenting on 'end'\r\n\t\tembeddedElectricCharacters: ['d']\r\n\t}\r\n};\r\n\r\n/*\r\n * Ruby language definition\r\n *\r\n * Quite a complex language due to elaborate escape sequences\r\n * and quoting of literate strings/regular expressions, and\r\n * an 'end' keyword that does not always apply to modifiers like until and while,\r\n * and a 'do' keyword that sometimes starts a block, but sometimes is part of\r\n * another statement (like 'while').\r\n *\r\n * (1) end blocks:\r\n * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\r\n * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\r\n * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\r\n * To do proper brace matching we do some elaborate state manipulation.\r\n * some examples:\r\n *\r\n *   until bla do\r\n *     work until tired\r\n *     list.each do\r\n *       something if test\r\n *     end\r\n *   end\r\n *\r\n * or\r\n *\r\n * if test\r\n *  something (if test then x end)\r\n *  bar if bla\r\n * end\r\n *\r\n * or, how about using class as a property..\r\n *\r\n * class Test\r\n *   def endpoint\r\n *     self.class.endpoint || routes\r\n *   end\r\n * end\r\n *\r\n * (2) quoting:\r\n * there are many kinds of strings and escape sequences. But also, one can\r\n * start many string-like things as '%qx' where q specifies the kind of string\r\n * (like a command, escape expanded, regular expression, symbol etc.), and x is\r\n * some character and only another 'x' ends the sequence. Except for brackets\r\n * where the closing bracket ends the sequence.. and except for a nested bracket\r\n * inside the string like entity. Also, such strings can contain interpolated\r\n * ruby expressions again (and span multiple lines). Moreover, expanded\r\n * regular expression can also contain comments.\r\n */\r\n\r\nexport var language = <ILanguage> {\r\n\ttokenPostfix: '.ruby',\r\n\r\n\tkeywords: [\r\n\t\t'__LINE__', '__ENCODING__', '__FILE__', 'BEGIN', 'END', 'alias', 'and', 'begin',\r\n\t\t'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'end',\r\n\t\t'ensure', 'for', 'false', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo',\r\n\t\t'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless',\r\n\t\t'until', 'when', 'while', 'yield',\r\n\t],\r\n\r\n\tkeywordops: [\r\n\t\t'::', '..', '...', '?', ':', '=>'\r\n\t],\r\n\r\n\tbuiltins: [\r\n\t\t'require', 'public', 'private', 'include', 'extend', 'attr_reader',\r\n\t\t'protected', 'private_class_method', 'protected_class_method', 'new'\r\n\t],\r\n\r\n\t// these are closed by 'end' (if, while and until are handled separately)\r\n\tdeclarations: [\r\n\t\t'module','class','def','case','do','begin','for','if','while','until','unless'\r\n\t],\r\n\r\n\tlinedecls: [\r\n\t\t'def','case','do','begin','for','if','while','until','unless'\r\n\t],\r\n\r\n\toperators: [\r\n\t\t'^', '&', '|', '<=>', '==', '===', '!~', '=~', '>', '>=', '<', '<=', '<<', '>>', '+',\r\n\t\t'-', '*', '/', '%', '**', '~', '+@', '-@', '[]', '[]=', '`',\r\n\t\t'+=', '-=', '*=', '**=', '/=', '^=', '%=', '<<=', '>>=', '&=', '&&=', '||=', '|='\r\n\t],\r\n\r\n\tbrackets: [\r\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis'},\r\n\t\t{ open: '{', close: '}', token: 'delimiter.curly'},\r\n\t\t{ open: '[', close: ']', token: 'delimiter.square'}\r\n\t],\r\n\r\n\t// we include these common regular expressions\r\n\tsymbols:  /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\r\n\r\n\t// escape sequences\r\n\tescape:  /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\r\n\tescapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\r\n\r\n\tdecpart: /\\d(_?\\d)*/,\r\n\tdecimal: /0|@decpart/,\r\n\r\n\tdelim:     /[^a-zA-Z0-9\\s\\n\\r]/,\r\n\theredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\r\n\r\n\tregexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n\tregexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\r\n\r\n\r\n\t// The main tokenizer for our languages\r\n\ttokenizer: {\r\n\t\t// Main entry.\r\n\t\t// root.<decl> where decl is the current opening declaration (like 'class')\r\n\t\troot: [\r\n\t\t\t// identifiers and keywords\r\n\t\t\t// most complexity here is due to matching 'end' correctly with declarations.\r\n\t\t\t// We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\r\n\t\t\t[/^(\\s*)([a-z_]\\w*[!?=]?)/, ['white',\r\n\t\t\t\t{ cases: { 'for|until|while': { token: 'keyword.$2', bracket: '@open', next: '@dodecl.$2' },\r\n\t\t\t\t\t\t\t'@declarations':   { token: 'keyword.$2', bracket: '@open', next: '@root.$2' },\r\n\t\t\t\t\t\t\t'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' },\r\n\t\t\t\t\t\t\t'@keywords': 'keyword',\r\n\t\t\t\t\t\t\t'@builtins': 'predefined',\r\n\t\t\t\t\t\t\t'@default': 'identifier' } }]],\r\n\t\t\t[/[a-z_]\\w*[!?=]?/,\r\n\t\t\t\t{ cases: { 'if|unless|while|until': { token: 'keyword.$0x', bracket: '@open', next: '@modifier.$0x' },\r\n\t\t\t\t\t\t\t'for': { token: 'keyword.$2', bracket: '@open', next: '@dodecl.$2' },\r\n\t\t\t\t\t\t\t'@linedecls': { token: 'keyword.$0', bracket: '@open', next: '@root.$0' },\r\n\t\t\t\t\t\t\t'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' },\r\n\t\t\t\t\t\t\t'@keywords': 'keyword',\r\n\t\t\t\t\t\t\t'@builtins': 'predefined',\r\n\t\t\t\t\t\t\t'@default': 'identifier' } }],\r\n\r\n\t\t\t[/[A-Z][\\w]*[!?=]?/, 'constructor.identifier' ],     // constant\r\n\t\t\t[/\\$[\\w]*/,    'global.constant' ],               // global\r\n\t\t\t[/@[\\w]*/,     'namespace.instance.identifier' ], // instance\r\n\t\t\t[/@@[\\w]*/,    'namespace.class.identifier' ],    // class\r\n\r\n\t\t\t// here document\r\n\t\t\t[/<<-(@heredelim).*/, { token: 'string.heredoc.delimiter', bracket: '@open', next: '@heredoc.$1' } ],\r\n\t\t\t[/[ \\t\\r\\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', bracket: '@open', next: '@heredoc.$1' } ],\r\n\t\t\t[/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', bracket: '@open', next: '@heredoc.$1' } ],\r\n\r\n\r\n\t\t\t// whitespace\r\n\t\t\t{ include: '@whitespace' },\r\n\r\n\t\t\t// strings\r\n\t\t\t[/\"/,  { token: 'string.d.delim', bracket: '@open', next: '@dstring.d.\"'} ],\r\n\t\t\t[/'/,  { token: 'string.sq.delim', bracket: '@open', next: '@sstring.sq' } ],\r\n\r\n\t\t\t// % literals. For efficiency, rematch in the 'pstring' state\r\n\t\t\t[/%([rsqxwW]|Q?)/,  { token: '@rematch', next: 'pstring' } ],\r\n\r\n\t\t\t// commands and symbols\r\n\t\t\t[/`/,  { token: 'string.x.delim', bracket: '@open', next: '@dstring.x.`' } ],\r\n\t\t\t[/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\r\n\t\t\t[/:\"/, { token: 'string.s.delim', bracket: '@open', next: '@dstring.s.\"' } ],\r\n\t\t\t[/:'/, { token: 'string.s.delim', bracket: '@open', next: '@sstring.s' } ],\r\n\r\n\t\t\t// regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\r\n\t\t\t[/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', bracket: '@open', next: '@regexp' } ],\r\n\r\n\t\t\t// delimiters and operators\r\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\r\n\t\t\t[/@symbols/, { cases: { '@keywordops': 'keyword',\r\n\t\t\t\t\t\t\t\t\t'@operators' : 'operator',\r\n\t\t\t\t\t\t\t\t\t'@default'   : '' } } ],\r\n\r\n\t\t\t[/[;,]/, 'delimiter'],\r\n\r\n\t\t\t// numbers\r\n\t\t\t[/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\r\n\t\t\t[/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\r\n\t\t\t[/0[bB][01](_?[01])*/, 'number.binary'],\r\n\t\t\t[/0[dD]@decpart/, 'number'],\r\n\t\t\t[/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, { cases: { '$1': 'number.float',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'number' }}],\r\n\r\n\t\t],\r\n\r\n\t\t// used to not treat a 'do' as a block opener if it occurs on the same\r\n\t\t// line as a 'do' statement: 'while|until|for'\r\n\t\t// dodecl.<decl> where decl is the declarations started, like 'while'\r\n\t\tdodecl: [\r\n\t\t\t[/^/, { token: '', switchTo: '@root.$S2' }], // get out of do-skipping mode on a new line\r\n\t\t\t[/[a-z_]\\w*[!?=]?/, { cases: { 'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' }, // end on same line\r\n\t\t\t\t\t\t\t\t\t\t\t'do' : { token: 'keyword', switchTo: '@root.$S2' }, // do on same line: not an open bracket here\r\n\t\t\t\t\t\t\t\t\t\t\t'@linedecls': { token: '@rematch', switchTo: '@root.$S2' }, // other declaration on same line: rematch\r\n\t\t\t\t\t\t\t\t\t\t\t'@keywords': 'keyword',\r\n\t\t\t\t\t\t\t\t\t\t\t'@builtins': 'predefined',\r\n\t\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\r\n\t\t\t{ include: '@root' }\r\n\t\t],\r\n\r\n\t\t// used to prevent potential modifiers ('if|until|while|unless') to match\r\n\t\t// with 'end' keywords.\r\n\t\t// modifier.<decl>x where decl is the declaration starter, like 'if'\r\n\t\tmodifier: [\r\n\t\t\t[/^/, '', '@pop'], // it was a modifier: get out of modifier mode on a new line\r\n\t\t\t[/[a-z_]\\w*[!?=]?/, { cases: { 'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' }, // end on same line\r\n\t\t\t\t\t\t\t\t\t\t\t'then|else|elsif|do': { token: 'keyword', switchTo: '@root.$S2' }, // real declaration and not a modifier\r\n\t\t\t\t\t\t\t\t\t\t\t'@linedecls': { token: '@rematch', switchTo: '@root.$S2' }, // other declaration => not a modifier\r\n\t\t\t\t\t\t\t\t\t\t\t'@keywords': 'keyword',\r\n\t\t\t\t\t\t\t\t\t\t\t'@builtins': 'predefined',\r\n\t\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\r\n\t\t\t{ include: '@root' }\r\n\t\t],\r\n\r\n\t\t// single quote strings (also used for symbols)\r\n\t\t// sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\r\n\t\tsstring: [\r\n\t\t\t[/[^\\\\']+/,      'string.$S2' ],\r\n\t\t\t[/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\r\n\t\t\t[/\\\\./,          'string.$S2.invalid'],\r\n\t\t\t[/'/,            { token: 'string.$S2.delim', bracket: '@close', next: '@pop'} ]\r\n\t\t],\r\n\r\n\t\t// double quoted \"string\".\r\n\t\t// dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\r\n\t\t// and delim is the ending delimiter (\" or `)\r\n\t\tdstring: [\r\n\t\t\t[/[^\\\\`\"#]+/, 'string.$S2'],\r\n\t\t\t[/#/,         'string.$S2.escape', '@interpolated' ],\r\n\t\t\t[/\\\\$/,       'string.$S2.escape' ],\r\n\t\t\t[/@escapes/,  'string.$S2.escape'],\r\n\t\t\t[/\\\\./,       'string.$S2.escape.invalid'],\r\n\t\t\t[/[`\"]/,      { cases: { '$#==$S3':  { token: 'string.$S2.delim', bracket: '@close', next: '@pop'},\r\n\t\t\t\t\t\t\t\t\t\t'@default': 'string.$S2' } } ]\r\n\t\t],\r\n\r\n\t\t// literal documents\r\n\t\t// heredoc.<close> where close is the closing delimiter\r\n\t\theredoc: [\r\n\t\t\t[/^(\\s*)(@heredelim)$/, { cases: { '$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', bracket: '@close', next: '@pop' }],\r\n\t\t\t\t\t\t\t\t\t\t\t\t'@default': ['string.heredoc','string.heredoc'] }}],\r\n\t\t\t[/.*/, 'string.heredoc' ],\r\n\t\t],\r\n\r\n\t\t// interpolated sequence\r\n\t\tinterpolated: [\r\n\t\t\t[/\\$\\w*/,      'global.constant', '@pop' ],\r\n\t\t\t[/@\\w*/,       'namespace.class.identifier', '@pop' ],\r\n\t\t\t[/@@\\w*/,      'namespace.instance.identifier', '@pop' ],\r\n\t\t\t[/[{]/, { token: 'string.escape.curly', bracket: '@open', switchTo: '@interpolated_compound' }],\r\n\t\t\t['', '', '@pop' ], // just a # is interpreted as a #\r\n\t\t],\r\n\r\n\t\t// any code\r\n\t\tinterpolated_compound: [\r\n\t\t\t[/[}]/, { token: 'string.escape.curly', bracket: '@close', next: '@pop'} ],\r\n\t\t\t{ include: '@root' },\r\n\t\t],\r\n\r\n\t\t// %r quoted regexp\r\n\t\t// pregexp.<open>.<close> where open/close are the open/close delimiter\r\n\t\tpregexp: [\r\n\t\t\t{ include: '@whitespace' },\r\n\t\t\t// turns out that you can quote using regex control characters, aargh!\r\n\t\t\t// for example; %r|kgjgaj| is ok (even though | is used for alternation)\r\n\t\t\t// so, we need to match those first\r\n\t\t\t[/[^\\(\\{\\[\\\\]/, { cases: { '$#==$S3' : { token: 'regexp.delim', bracket: '@close', next: '@pop' },\r\n\t\t\t\t\t\t\t\t\t\t'$#==$S2' : { token: 'regexp.delim', bracket: '@open', next: '@push' }, // nested delimiters are allowed..\r\n\t\t\t\t\t\t\t\t\t\t'~[)}\\\\]]' : '@brackets.regexp.escape.control',\r\n\t\t\t\t\t\t\t\t\t\t'~@regexpctl': 'regexp.escape.control',\r\n\t\t\t\t\t\t\t\t\t\t'@default': 'regexp' }}],\r\n\t\t\t{ include: '@regexcontrol' },\r\n\t\t],\r\n\r\n\t\t// We match regular expression quite precisely\r\n\t\tregexp: [\r\n\t\t\t{ include:   '@regexcontrol' },\r\n\t\t\t[/[^\\\\\\/]/,  'regexp' ],\r\n\t\t\t['/[ixmp]*', { token: 'regexp.delim', bracket: '@close'}, '@pop' ],\r\n\t\t],\r\n\r\n\t\tregexcontrol: [\r\n\t\t\t[/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['@brackets.regexp.escape.control', 'regexp.escape.control', '@brackets.regexp.escape.control'] ],\r\n\t\t\t[/(\\[)(\\^?)/,     ['@brackets.regexp.escape.control',{ token: 'regexp.escape.control', next: '@regexrange'}]],\r\n\t\t\t[/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control'] ],\r\n\t\t\t[/\\(\\?#/,         { token: 'regexp.escape.control', bracket: '@open', next: '@regexpcomment' }],\r\n\t\t\t[/[()]/,        '@brackets.regexp.escape.control'],\r\n\t\t\t[/@regexpctl/,  'regexp.escape.control'],\r\n\t\t\t[/\\\\$/,         'regexp.escape' ],\r\n\t\t\t[/@regexpesc/,  'regexp.escape' ],\r\n\t\t\t[/\\\\\\./,        'regexp.invalid' ],\r\n\t\t\t[/#/,           'regexp.escape', '@interpolated' ],\r\n\t\t],\r\n\r\n\t\tregexrange: [\r\n\t\t\t[/-/,     'regexp.escape.control'],\r\n\t\t\t[/\\^/,    'regexp.invalid'],\r\n\t\t\t[/\\\\$/,   'regexp.escape' ],\r\n\t\t\t[/@regexpesc/, 'regexp.escape'],\r\n\t\t\t[/[^\\]]/, 'regexp'],\r\n\t\t\t[/\\]/,    '@brackets.regexp.escape.control', '@pop'],\r\n\t\t],\r\n\r\n\t\tregexpcomment: [\r\n\t\t\t[ /[^)]+/, 'comment' ],\r\n\t\t\t[ /\\)/, { token: 'regexp.escape.control', bracket: '@close', next: '@pop' } ]\r\n\t\t],\r\n\r\n\r\n\t\t// % quoted strings\r\n\t\t// A bit repetitive since we need to often special case the kind of ending delimiter\r\n\t\tpstring: [\r\n\t\t\t[/%([qws])\\(/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.(.)' } ],\r\n\t\t\t[/%([qws])\\[/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.[.]' } ],\r\n\t\t\t[/%([qws])\\{/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.{.}' } ],\r\n\t\t\t[/%([qws])</,   { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.<.>' } ],\r\n\t\t\t[/%([qws])(@delim)/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.$2.$2' } ],\r\n\r\n\t\t\t[/%r\\(/,  { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.(.)' } ],\r\n\t\t\t[/%r\\[/,  { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.[.]' } ],\r\n\t\t\t[/%r\\{/,  { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.{.}' } ],\r\n\t\t\t[/%r</,   { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.<.>' } ],\r\n\t\t\t[/%r(@delim)/, { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.$1.$1' } ],\r\n\r\n\t\t\t[/%(x|W|Q?)\\(/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.(.)' } ],\r\n\t\t\t[/%(x|W|Q?)\\[/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.[.]' } ],\r\n\t\t\t[/%(x|W|Q?)\\{/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.{.}' } ],\r\n\t\t\t[/%(x|W|Q?)</,   { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.<.>' } ],\r\n\t\t\t[/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.$2.$2' } ],\r\n\r\n\t\t\t[/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' } ], // recover\r\n\t\t\t[/./, { token: 'invalid', next: '@pop' } ], // recover\r\n\t\t],\r\n\r\n\t\t// non-expanded quoted string.\r\n\t\t// qstring.<kind>.<open>.<close>\r\n\t\t//  kind = q|w|s  (single quote, array, symbol)\r\n\t\t//  open = open delimiter\r\n\t\t//  close = close delimiter\r\n\t\tqstring: [\r\n\t\t\t[/\\\\$/, 'string.$S2.escape' ],\r\n\t\t\t[/\\\\./, 'string.$S2.escape' ],\r\n\t\t\t[/./,   { cases: { '$#==$S4' : { token: 'string.$S2.delim', bracket: '@close', next: '@pop' },\r\n\t\t\t\t\t\t\t\t'$#==$S3' : { token: 'string.$S2.delim', bracket: '@open', next: '@push' }, // nested delimiters are allowed..\r\n\t\t\t\t\t\t\t\t'@default': 'string.$S2' }}],\r\n\t\t],\r\n\r\n\t\t// expanded quoted string.\r\n\t\t// qqstring.<kind>.<open>.<close>\r\n\t\t//  kind = Q|W|x  (double quote, array, command)\r\n\t\t//  open = open delimiter\r\n\t\t//  close = close delimiter\r\n\t\tqqstring: [\r\n\t\t\t[/#/, 'string.$S2.escape', '@interpolated' ],\r\n\t\t\t{ include: '@qstring' }\r\n\t\t],\r\n\r\n\r\n\t\t// whitespace & comments\r\n\t\twhitespace: [\r\n\t\t\t[/[ \\t\\r\\n]+/, ''],\r\n\t\t\t[/^\\s*=begin\\b/,       'comment', '@comment' ],\r\n\t\t\t[/#.*$/,    'comment'],\r\n\t\t],\r\n\r\n\t\tcomment: [\r\n\t\t\t[/[^=]+/, 'comment' ],\r\n\t\t\t[/^\\s*=begin\\b/, 'comment.invalid' ],    // nested comment\r\n\t\t\t[/^\\s*=end\\b.*/, 'comment', '@pop'  ],\r\n\t\t\t[/[=]/, 'comment' ]\r\n\t\t],\r\n\t}\r\n};"]}