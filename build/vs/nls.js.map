{"version":3,"sources":["fake","../C:/REPOS/monaco/vscode/out-build/vs/nls.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vs/nls.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.3.1(undefined)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/*---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nvar _nlsPluginGlobal = this;\r\nvar NLSLoaderPlugin;\r\n(function (NLSLoaderPlugin) {\r\n    var global = _nlsPluginGlobal;\r\n    var Resources = global.Plugin && global.Plugin.Resources ? global.Plugin.Resources : undefined;\r\n    var DEFAULT_TAG = 'i-default';\r\n    var IS_PSEUDO = (global && global.document && global.document.location && global.document.location.hash.indexOf('pseudo=true') >= 0);\r\n    var slice = Array.prototype.slice;\r\n    function _format(message, args) {\r\n        var result;\r\n        if (args.length === 0) {\r\n            result = message;\r\n        }\r\n        else {\r\n            result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\r\n                var index = rest[0];\r\n                return typeof args[index] !== 'undefined' ? args[index] : match;\r\n            });\r\n        }\r\n        if (IS_PSEUDO) {\r\n            // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\r\n            result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\r\n        }\r\n        return result;\r\n    }\r\n    function findLanguageForModule(config, name) {\r\n        var result = config[name];\r\n        if (result)\r\n            return result;\r\n        result = config['*'];\r\n        if (result)\r\n            return result;\r\n        return null;\r\n    }\r\n    function localize(data, message) {\r\n        var args = [];\r\n        for (var _i = 0; _i < (arguments.length - 2); _i++) {\r\n            args[_i] = arguments[_i + 2];\r\n        }\r\n        return _format(message, args);\r\n    }\r\n    function createScopedLocalize(scope) {\r\n        return function (idx, defaultValue) {\r\n            var restArgs = slice.call(arguments, 2);\r\n            return _format(scope[idx], restArgs);\r\n        };\r\n    }\r\n    var NLSPlugin = (function () {\r\n        function NLSPlugin() {\r\n            this.localize = localize;\r\n        }\r\n        NLSPlugin.prototype.setPseudoTranslation = function (value) {\r\n            IS_PSEUDO = value;\r\n        };\r\n        NLSPlugin.prototype.create = function (key, data) {\r\n            return {\r\n                localize: createScopedLocalize(data[key])\r\n            };\r\n        };\r\n        NLSPlugin.prototype.load = function (name, req, load, config) {\r\n            config = config || {};\r\n            if (!name || name.length === 0) {\r\n                load({\r\n                    localize: localize\r\n                });\r\n            }\r\n            else {\r\n                var suffix = void 0;\r\n                if (Resources && Resources.getString) {\r\n                    suffix = '.nls.keys';\r\n                    req([name + suffix], function (keyMap) {\r\n                        load({\r\n                            localize: function (moduleKey, index) {\r\n                                if (!keyMap[moduleKey])\r\n                                    return 'NLS error: unknown key ' + moduleKey;\r\n                                var mk = keyMap[moduleKey].keys;\r\n                                if (index >= mk.length)\r\n                                    return 'NLS error unknow index ' + index;\r\n                                var subKey = mk[index];\r\n                                var args = [];\r\n                                args[0] = moduleKey + '_' + subKey;\r\n                                for (var _i = 0; _i < (arguments.length - 2); _i++) {\r\n                                    args[_i + 1] = arguments[_i + 2];\r\n                                }\r\n                                return Resources.getString.apply(Resources, args);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    if (config.isBuild) {\r\n                        req([name + '.nls', name + '.nls.keys'], function (messages, keys) {\r\n                            NLSPlugin.BUILD_MAP[name] = messages;\r\n                            NLSPlugin.BUILD_MAP_KEYS[name] = keys;\r\n                            load(messages);\r\n                        });\r\n                    }\r\n                    else {\r\n                        var pluginConfig = config['vs/nls'] || {};\r\n                        var language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\r\n                        suffix = '.nls';\r\n                        if (language !== null && language !== DEFAULT_TAG) {\r\n                            suffix = suffix + '.' + language;\r\n                        }\r\n                        req([name + suffix], function (messages) {\r\n                            if (Array.isArray(messages)) {\r\n                                messages.localize = createScopedLocalize(messages);\r\n                            }\r\n                            else {\r\n                                messages.localize = createScopedLocalize(messages[name]);\r\n                            }\r\n                            load(messages);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        NLSPlugin.prototype._getEntryPointsMap = function () {\r\n            global.nlsPluginEntryPoints = global.nlsPluginEntryPoints || {};\r\n            return global.nlsPluginEntryPoints;\r\n        };\r\n        NLSPlugin.prototype.write = function (pluginName, moduleName, write) {\r\n            // getEntryPoint is a Monaco extension to r.js\r\n            var entryPoint = write.getEntryPoint();\r\n            // r.js destroys the context of this plugin between calling 'write' and 'writeFile'\r\n            // so the only option at this point is to leak the data to a global\r\n            var entryPointsMap = this._getEntryPointsMap();\r\n            entryPointsMap[entryPoint] = entryPointsMap[entryPoint] || [];\r\n            entryPointsMap[entryPoint].push(moduleName);\r\n            if (moduleName !== entryPoint) {\r\n                write.asModule(pluginName + '!' + moduleName, 'define([\\'vs/nls\\', \\'vs/nls!' + entryPoint + '\\'], function(nls, data) { return nls.create(\"' + moduleName + '\", data); });');\r\n            }\r\n        };\r\n        NLSPlugin.prototype.writeFile = function (pluginName, moduleName, req, write, config) {\r\n            var entryPointsMap = this._getEntryPointsMap();\r\n            if (entryPointsMap.hasOwnProperty(moduleName)) {\r\n                var fileName = req.toUrl(moduleName + '.nls.js');\r\n                var contents = [\r\n                    '/*---------------------------------------------------------',\r\n                    ' * Copyright (c) Microsoft Corporation. All rights reserved.',\r\n                    ' *--------------------------------------------------------*/'\r\n                ], entries = entryPointsMap[moduleName];\r\n                var data = {};\r\n                for (var i = 0; i < entries.length; i++) {\r\n                    data[entries[i]] = NLSPlugin.BUILD_MAP[entries[i]];\r\n                }\r\n                contents.push('define(\"' + moduleName + '.nls\", ' + JSON.stringify(data, null, '\\t') + ');');\r\n                write(fileName, contents.join('\\r\\n'));\r\n            }\r\n        };\r\n        NLSPlugin.prototype.finishBuild = function (write) {\r\n            write('nls.metadata.json', JSON.stringify({\r\n                keys: NLSPlugin.BUILD_MAP_KEYS,\r\n                messages: NLSPlugin.BUILD_MAP,\r\n                bundles: this._getEntryPointsMap()\r\n            }, null, '\\t'));\r\n        };\r\n        ;\r\n        NLSPlugin.BUILD_MAP = {};\r\n        NLSPlugin.BUILD_MAP_KEYS = {};\r\n        return NLSPlugin;\r\n    }());\r\n    NLSLoaderPlugin.NLSPlugin = NLSPlugin;\r\n    (function () {\r\n        define('vs/nls', new NLSPlugin());\r\n    })();\r\n})(NLSLoaderPlugin || (NLSLoaderPlugin = {}));\r\n"]}