{"version":3,"sources":["fake","../d:/REPOS/monaco/vscode/out-build/vs/css.js"],"names":[],"mappingsfile":"vs/css.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.3.1(undefined)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/*---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar _cssPluginGlobal = this;\r\nvar CSSLoaderPlugin;\r\n(function (CSSLoaderPlugin) {\r\n    var global = _cssPluginGlobal;\r\n    /**\r\n     * Known issue:\r\n     * - In IE there is no way to know if the CSS file loaded successfully or not.\r\n     */\r\n    var BrowserCSSLoader = (function () {\r\n        function BrowserCSSLoader() {\r\n            this._pendingLoads = 0;\r\n        }\r\n        BrowserCSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\r\n            var unbind = function () {\r\n                linkNode.removeEventListener('load', loadEventListener);\r\n                linkNode.removeEventListener('error', errorEventListener);\r\n            };\r\n            var loadEventListener = function (e) {\r\n                unbind();\r\n                callback();\r\n            };\r\n            var errorEventListener = function (e) {\r\n                unbind();\r\n                errorback(e);\r\n            };\r\n            linkNode.addEventListener('load', loadEventListener);\r\n            linkNode.addEventListener('error', errorEventListener);\r\n        };\r\n        BrowserCSSLoader.prototype._onLoad = function (name, callback) {\r\n            this._pendingLoads--;\r\n            callback();\r\n        };\r\n        BrowserCSSLoader.prototype._onLoadError = function (name, errorback, err) {\r\n            this._pendingLoads--;\r\n            errorback(err);\r\n        };\r\n        BrowserCSSLoader.prototype._insertLinkNode = function (linkNode) {\r\n            this._pendingLoads++;\r\n            var head = document.head || document.getElementsByTagName('head')[0];\r\n            var other = head.getElementsByTagName('link') || document.head.getElementsByTagName('script');\r\n            if (other.length > 0) {\r\n                head.insertBefore(linkNode, other[other.length - 1]);\r\n            }\r\n            else {\r\n                head.appendChild(linkNode);\r\n            }\r\n        };\r\n        BrowserCSSLoader.prototype.createLinkTag = function (name, cssUrl, externalCallback, externalErrorback) {\r\n            var _this = this;\r\n            var linkNode = document.createElement('link');\r\n            linkNode.setAttribute('rel', 'stylesheet');\r\n            linkNode.setAttribute('type', 'text/css');\r\n            linkNode.setAttribute('data-name', name);\r\n            var callback = function () { return _this._onLoad(name, externalCallback); };\r\n            var errorback = function (err) { return _this._onLoadError(name, externalErrorback, err); };\r\n            this.attachListeners(name, linkNode, callback, errorback);\r\n            linkNode.setAttribute('href', cssUrl);\r\n            return linkNode;\r\n        };\r\n        BrowserCSSLoader.prototype._linkTagExists = function (name, cssUrl) {\r\n            var i, len, nameAttr, hrefAttr, links = document.getElementsByTagName('link');\r\n            for (i = 0, len = links.length; i < len; i++) {\r\n                nameAttr = links[i].getAttribute('data-name');\r\n                hrefAttr = links[i].getAttribute('href');\r\n                if (nameAttr === name || hrefAttr === cssUrl) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        BrowserCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\r\n            if (this._linkTagExists(name, cssUrl)) {\r\n                externalCallback();\r\n                return;\r\n            }\r\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\r\n            this._insertLinkNode(linkNode);\r\n        };\r\n        return BrowserCSSLoader;\r\n    }());\r\n    /**\r\n     * Prior to IE10, IE could not go above 31 stylesheets in a page\r\n     * http://blogs.msdn.com/b/ieinternals/archive/2011/05/14/internet-explorer-stylesheet-rule-selector-import-sheet-limit-maximum.aspx\r\n     *\r\n     * The general strategy here is to not write more than 31 link nodes to the page at the same time\r\n     * When stylesheets get loaded, they will get merged one into another to free up\r\n     * some positions for new link nodes.\r\n     */\r\n    var IE9CSSLoader = (function (_super) {\r\n        __extends(IE9CSSLoader, _super);\r\n        function IE9CSSLoader() {\r\n            _super.call(this);\r\n            this._blockedLoads = [];\r\n            this._mergeStyleSheetsTimeout = -1;\r\n        }\r\n        IE9CSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\r\n            if (this._linkTagExists(name, cssUrl)) {\r\n                externalCallback();\r\n                return;\r\n            }\r\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\r\n            if (this._styleSheetCount() < 31) {\r\n                this._insertLinkNode(linkNode);\r\n            }\r\n            else {\r\n                this._blockedLoads.push(linkNode);\r\n                this._handleBlocked();\r\n            }\r\n        };\r\n        IE9CSSLoader.prototype._styleSheetCount = function () {\r\n            var linkCount = document.getElementsByTagName('link').length;\r\n            var styleCount = document.getElementsByTagName('style').length;\r\n            return linkCount + styleCount;\r\n        };\r\n        IE9CSSLoader.prototype._onLoad = function (name, callback) {\r\n            _super.prototype._onLoad.call(this, name, callback);\r\n            this._handleBlocked();\r\n        };\r\n        IE9CSSLoader.prototype._onLoadError = function (name, errorback, err) {\r\n            _super.prototype._onLoadError.call(this, name, errorback, err);\r\n            this._handleBlocked();\r\n        };\r\n        IE9CSSLoader.prototype._handleBlocked = function () {\r\n            var _this = this;\r\n            var blockedLoadsCount = this._blockedLoads.length;\r\n            if (blockedLoadsCount > 0 && this._mergeStyleSheetsTimeout === -1) {\r\n                this._mergeStyleSheetsTimeout = window.setTimeout(function () { return _this._mergeStyleSheets(); }, 0);\r\n            }\r\n        };\r\n        IE9CSSLoader.prototype._mergeStyleSheet = function (dstPath, dst, srcPath, src) {\r\n            for (var i = src.rules.length - 1; i >= 0; i--) {\r\n                dst.insertRule(Utilities.rewriteUrls(srcPath, dstPath, src.rules[i].cssText), 0);\r\n            }\r\n        };\r\n        IE9CSSLoader.prototype._asIE9HTMLLinkElement = function (linkElement) {\r\n            return linkElement;\r\n        };\r\n        IE9CSSLoader.prototype._mergeStyleSheets = function () {\r\n            this._mergeStyleSheetsTimeout = -1;\r\n            var blockedLoadsCount = this._blockedLoads.length;\r\n            var i, linkDomNodes = document.getElementsByTagName('link');\r\n            var linkDomNodesCount = linkDomNodes.length;\r\n            var mergeCandidates = [];\r\n            for (i = 0; i < linkDomNodesCount; i++) {\r\n                if (linkDomNodes[i].readyState === 'loaded' || linkDomNodes[i].readyState === 'complete') {\r\n                    mergeCandidates.push({\r\n                        linkNode: linkDomNodes[i],\r\n                        rulesLength: this._asIE9HTMLLinkElement(linkDomNodes[i]).styleSheet.rules.length\r\n                    });\r\n                }\r\n            }\r\n            var mergeCandidatesCount = mergeCandidates.length;\r\n            // Just a little legend here :)\r\n            // - linkDomNodesCount: total number of link nodes in the DOM (this should be kept <= 31)\r\n            // - mergeCandidatesCount: loaded (finished) link nodes in the DOM (only these can be merged)\r\n            // - blockedLoadsCount: remaining number of load requests that did not fit in before (because of the <= 31 constraint)\r\n            // Now comes the heuristic part, we don't want to do too much work with the merging of styles,\r\n            // but we do need to merge stylesheets to free up loading slots.\r\n            var mergeCount = Math.min(Math.floor(mergeCandidatesCount / 2), blockedLoadsCount);\r\n            // Sort the merge candidates descending (least rules last)\r\n            mergeCandidates.sort(function (a, b) {\r\n                return b.rulesLength - a.rulesLength;\r\n            });\r\n            var srcIndex, dstIndex;\r\n            for (i = 0; i < mergeCount; i++) {\r\n                srcIndex = mergeCandidates.length - 1 - i;\r\n                dstIndex = i % (mergeCandidates.length - mergeCount);\r\n                // Merge rules of src into dst\r\n                this._mergeStyleSheet(mergeCandidates[dstIndex].linkNode.href, this._asIE9HTMLLinkElement(mergeCandidates[dstIndex].linkNode).styleSheet, mergeCandidates[srcIndex].linkNode.href, this._asIE9HTMLLinkElement(mergeCandidates[srcIndex].linkNode).styleSheet);\r\n                // Remove dom node of src\r\n                mergeCandidates[srcIndex].linkNode.parentNode.removeChild(mergeCandidates[srcIndex].linkNode);\r\n                linkDomNodesCount--;\r\n            }\r\n            var styleSheetCount = this._styleSheetCount();\r\n            while (styleSheetCount < 31 && this._blockedLoads.length > 0) {\r\n                this._insertLinkNode(this._blockedLoads.shift());\r\n                styleSheetCount++;\r\n            }\r\n        };\r\n        return IE9CSSLoader;\r\n    }(BrowserCSSLoader));\r\n    var IE8CSSLoader = (function (_super) {\r\n        __extends(IE8CSSLoader, _super);\r\n        function IE8CSSLoader() {\r\n            _super.call(this);\r\n        }\r\n        IE8CSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\r\n            linkNode.onload = function () {\r\n                linkNode.onload = null;\r\n                callback();\r\n            };\r\n        };\r\n        return IE8CSSLoader;\r\n    }(IE9CSSLoader));\r\n    var NodeCSSLoader = (function () {\r\n        function NodeCSSLoader() {\r\n            this.fs = require.nodeRequire('fs');\r\n        }\r\n        NodeCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\r\n            var contents = this.fs.readFileSync(cssUrl, 'utf8');\r\n            // Remove BOM\r\n            if (contents.charCodeAt(0) === NodeCSSLoader.BOM_CHAR_CODE) {\r\n                contents = contents.substring(1);\r\n            }\r\n            externalCallback(contents);\r\n        };\r\n        NodeCSSLoader.BOM_CHAR_CODE = 65279;\r\n        return NodeCSSLoader;\r\n    }());\r\n    // ------------------------------ Finally, the plugin\r\n    var CSSPlugin = (function () {\r\n        function CSSPlugin(cssLoader) {\r\n            this.cssLoader = cssLoader;\r\n        }\r\n        CSSPlugin.prototype.load = function (name, req, load, config) {\r\n            config = config || {};\r\n            var myConfig = config['vs/css'] || {};\r\n            if (myConfig.inlineResources) {\r\n                global.inlineResources = true;\r\n            }\r\n            var cssUrl = req.toUrl(name + '.css');\r\n            this.cssLoader.load(name, cssUrl, function (contents) {\r\n                // Contents has the CSS file contents if we are in a build\r\n                if (config.isBuild) {\r\n                    CSSPlugin.BUILD_MAP[name] = contents;\r\n                    CSSPlugin.BUILD_PATH_MAP[name] = cssUrl;\r\n                }\r\n                load({});\r\n            }, function (err) {\r\n                if (typeof load.error === 'function') {\r\n                    load.error('Could not find ' + cssUrl + ' or it was empty');\r\n                }\r\n            });\r\n        };\r\n        CSSPlugin.prototype.write = function (pluginName, moduleName, write) {\r\n            // getEntryPoint is a Monaco extension to r.js\r\n            var entryPoint = write.getEntryPoint();\r\n            // r.js destroys the context of this plugin between calling 'write' and 'writeFile'\r\n            // so the only option at this point is to leak the data to a global\r\n            global.cssPluginEntryPoints = global.cssPluginEntryPoints || {};\r\n            global.cssPluginEntryPoints[entryPoint] = global.cssPluginEntryPoints[entryPoint] || [];\r\n            global.cssPluginEntryPoints[entryPoint].push({\r\n                moduleName: moduleName,\r\n                contents: CSSPlugin.BUILD_MAP[moduleName],\r\n                fsPath: CSSPlugin.BUILD_PATH_MAP[moduleName],\r\n            });\r\n            write.asModule(pluginName + '!' + moduleName, 'define([\\'vs/css!' + entryPoint + '\\'], {});');\r\n        };\r\n        CSSPlugin.prototype.writeFile = function (pluginName, moduleName, req, write, config) {\r\n            if (global.cssPluginEntryPoints && global.cssPluginEntryPoints.hasOwnProperty(moduleName)) {\r\n                var fileName = req.toUrl(moduleName + '.css');\r\n                var contents = [\r\n                    '/*---------------------------------------------------------',\r\n                    ' * Copyright (c) Microsoft Corporation. All rights reserved.',\r\n                    ' *--------------------------------------------------------*/'\r\n                ], entries = global.cssPluginEntryPoints[moduleName];\r\n                for (var i = 0; i < entries.length; i++) {\r\n                    if (global.inlineResources) {\r\n                        contents.push(Utilities.rewriteOrInlineUrls(entries[i].fsPath, entries[i].moduleName, moduleName, entries[i].contents));\r\n                    }\r\n                    else {\r\n                        contents.push(Utilities.rewriteUrls(entries[i].moduleName, moduleName, entries[i].contents));\r\n                    }\r\n                }\r\n                write(fileName, contents.join('\\r\\n'));\r\n            }\r\n        };\r\n        CSSPlugin.prototype.getInlinedResources = function () {\r\n            return global.cssInlinedResources || [];\r\n        };\r\n        CSSPlugin.BUILD_MAP = {};\r\n        CSSPlugin.BUILD_PATH_MAP = {};\r\n        return CSSPlugin;\r\n    }());\r\n    CSSLoaderPlugin.CSSPlugin = CSSPlugin;\r\n    var Utilities = (function () {\r\n        function Utilities() {\r\n        }\r\n        Utilities.startsWith = function (haystack, needle) {\r\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\r\n        };\r\n        /**\r\n         * Find the path of a file.\r\n         */\r\n        Utilities.pathOf = function (filename) {\r\n            var lastSlash = filename.lastIndexOf('/');\r\n            if (lastSlash !== -1) {\r\n                return filename.substr(0, lastSlash + 1);\r\n            }\r\n            else {\r\n                return '';\r\n            }\r\n        };\r\n        /**\r\n         * A conceptual a + b for paths.\r\n         * Takes into account if `a` contains a protocol.\r\n         * Also normalizes the result: e.g.: a/b/ + ../c => a/c\r\n         */\r\n        Utilities.joinPaths = function (a, b) {\r\n            function findSlashIndexAfterPrefix(haystack, prefix) {\r\n                if (Utilities.startsWith(haystack, prefix)) {\r\n                    return Math.max(prefix.length, haystack.indexOf('/', prefix.length));\r\n                }\r\n                return 0;\r\n            }\r\n            var aPathStartIndex = 0;\r\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, '//');\r\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'http://');\r\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'https://');\r\n            function pushPiece(pieces, piece) {\r\n                if (piece === './') {\r\n                    // Ignore\r\n                    return;\r\n                }\r\n                if (piece === '../') {\r\n                    var prevPiece = (pieces.length > 0 ? pieces[pieces.length - 1] : null);\r\n                    if (prevPiece && prevPiece === '/') {\r\n                        // Ignore\r\n                        return;\r\n                    }\r\n                    if (prevPiece && prevPiece !== '../') {\r\n                        // Pop\r\n                        pieces.pop();\r\n                        return;\r\n                    }\r\n                }\r\n                // Push\r\n                pieces.push(piece);\r\n            }\r\n            function push(pieces, path) {\r\n                while (path.length > 0) {\r\n                    var slashIndex = path.indexOf('/');\r\n                    var piece = (slashIndex >= 0 ? path.substring(0, slashIndex + 1) : path);\r\n                    path = (slashIndex >= 0 ? path.substring(slashIndex + 1) : '');\r\n                    pushPiece(pieces, piece);\r\n                }\r\n            }\r\n            var pieces = [];\r\n            push(pieces, a.substr(aPathStartIndex));\r\n            if (b.length > 0 && b.charAt(0) === '/') {\r\n                pieces = [];\r\n            }\r\n            push(pieces, b);\r\n            return a.substring(0, aPathStartIndex) + pieces.join('');\r\n        };\r\n        Utilities.commonPrefix = function (str1, str2) {\r\n            var len = Math.min(str1.length, str2.length);\r\n            for (var i = 0; i < len; i++) {\r\n                if (str1.charCodeAt(i) !== str2.charCodeAt(i)) {\r\n                    break;\r\n                }\r\n            }\r\n            return str1.substring(0, i);\r\n        };\r\n        Utilities.commonFolderPrefix = function (fromPath, toPath) {\r\n            var prefix = Utilities.commonPrefix(fromPath, toPath);\r\n            var slashIndex = prefix.lastIndexOf('/');\r\n            if (slashIndex === -1) {\r\n                return '';\r\n            }\r\n            return prefix.substring(0, slashIndex + 1);\r\n        };\r\n        Utilities.relativePath = function (fromPath, toPath) {\r\n            if (Utilities.startsWith(toPath, '/') || Utilities.startsWith(toPath, 'http://') || Utilities.startsWith(toPath, 'https://')) {\r\n                return toPath;\r\n            }\r\n            // Ignore common folder prefix\r\n            var prefix = Utilities.commonFolderPrefix(fromPath, toPath);\r\n            fromPath = fromPath.substr(prefix.length);\r\n            toPath = toPath.substr(prefix.length);\r\n            var upCount = fromPath.split('/').length;\r\n            var result = '';\r\n            for (var i = 1; i < upCount; i++) {\r\n                result += '../';\r\n            }\r\n            return result + toPath;\r\n        };\r\n        Utilities._replaceURL = function (contents, replacer) {\r\n            // Use \")\" as the terminator as quotes are oftentimes not used at all\r\n            return contents.replace(/url\\(\\s*([^\\)]+)\\s*\\)?/g, function (_) {\r\n                var matches = [];\r\n                for (var _i = 1; _i < arguments.length; _i++) {\r\n                    matches[_i - 1] = arguments[_i];\r\n                }\r\n                var url = matches[0];\r\n                // Eliminate starting quotes (the initial whitespace is not captured)\r\n                if (url.charAt(0) === '\"' || url.charAt(0) === '\\'') {\r\n                    url = url.substring(1);\r\n                }\r\n                // The ending whitespace is captured\r\n                while (url.length > 0 && (url.charAt(url.length - 1) === ' ' || url.charAt(url.length - 1) === '\\t')) {\r\n                    url = url.substring(0, url.length - 1);\r\n                }\r\n                // Eliminate ending quotes\r\n                if (url.charAt(url.length - 1) === '\"' || url.charAt(url.length - 1) === '\\'') {\r\n                    url = url.substring(0, url.length - 1);\r\n                }\r\n                if (!Utilities.startsWith(url, 'data:') && !Utilities.startsWith(url, 'http://') && !Utilities.startsWith(url, 'https://')) {\r\n                    url = replacer(url);\r\n                }\r\n                return 'url(' + url + ')';\r\n            });\r\n        };\r\n        Utilities.rewriteUrls = function (originalFile, newFile, contents) {\r\n            return this._replaceURL(contents, function (url) {\r\n                var absoluteUrl = Utilities.joinPaths(Utilities.pathOf(originalFile), url);\r\n                return Utilities.relativePath(newFile, absoluteUrl);\r\n            });\r\n        };\r\n        Utilities.rewriteOrInlineUrls = function (originalFileFSPath, originalFile, newFile, contents) {\r\n            var fs = require.nodeRequire('fs');\r\n            var path = require.nodeRequire('path');\r\n            return this._replaceURL(contents, function (url) {\r\n                if (/\\.(svg|png)$/.test(url)) {\r\n                    var fsPath = path.join(path.dirname(originalFileFSPath), url);\r\n                    var fileContents = fs.readFileSync(fsPath);\r\n                    if (fileContents.length < 3000) {\r\n                        global.cssInlinedResources = global.cssInlinedResources || [];\r\n                        var normalizedFSPath = fsPath.replace(/\\\\/g, '/');\r\n                        if (global.cssInlinedResources.indexOf(normalizedFSPath) >= 0) {\r\n                            console.warn('CSS INLINING IMAGE AT ' + fsPath + ' MORE THAN ONCE. CONSIDER CONSOLIDATING CSS RULES');\r\n                        }\r\n                        global.cssInlinedResources.push(normalizedFSPath);\r\n                        var MIME = /\\.svg$/.test(url) ? 'image/svg+xml' : 'image/png';\r\n                        var DATA = ';base64,' + fileContents.toString('base64');\r\n                        if (/\\.svg$/.test(url)) {\r\n                            // .svg => url encode as explained at https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\r\n                            var newText = fileContents.toString()\r\n                                .replace(/\"/g, '\\'')\r\n                                .replace(/</g, '%3C')\r\n                                .replace(/>/g, '%3E')\r\n                                .replace(/&/g, '%26')\r\n                                .replace(/#/g, '%23')\r\n                                .replace(/\\s+/g, ' ');\r\n                            var encodedData = ',' + newText;\r\n                            if (encodedData.length < DATA.length) {\r\n                                DATA = encodedData;\r\n                            }\r\n                        }\r\n                        return '\"data:' + MIME + DATA + '\"';\r\n                    }\r\n                }\r\n                var absoluteUrl = Utilities.joinPaths(Utilities.pathOf(originalFile), url);\r\n                return Utilities.relativePath(newFile, absoluteUrl);\r\n            });\r\n        };\r\n        return Utilities;\r\n    }());\r\n    CSSLoaderPlugin.Utilities = Utilities;\r\n    (function () {\r\n        var cssLoader = null;\r\n        var isElectron = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions['electron'] !== 'undefined');\r\n        if (typeof process !== 'undefined' && process.versions && !!process.versions.node && !isElectron) {\r\n            cssLoader = new NodeCSSLoader();\r\n        }\r\n        else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('MSIE 9') >= 0) {\r\n            cssLoader = new IE9CSSLoader();\r\n        }\r\n        else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('MSIE 8') >= 0) {\r\n            cssLoader = new IE8CSSLoader();\r\n        }\r\n        else {\r\n            cssLoader = new BrowserCSSLoader();\r\n        }\r\n        define('vs/css', new CSSPlugin(cssLoader));\r\n    })();\r\n})(CSSLoaderPlugin || (CSSLoaderPlugin = {}));\r\n"]}