{"version":3,"sources":["fake","file:///C:/REPOS/monaco/vscode/src/vs/languages/markdown/common/markdownTokenTypes.ts","file:///C:/REPOS/monaco/vscode/src/vs/languages/markdown/common/markdown.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ICRA;;;oGAGgG;IAChG,YAAY,CAAC;IAEA,yBAAiB,GAAG,iBAAiB,CAAC;IACtC,oBAAY,GAAG,iBAAiB,CAAC;IACjC,wBAAgB,GAAG,6BAA6B,CAAC;IACjD,uBAAe,GAAG,gBAAgB,CAAC;IACnC,mBAAW,GAAG,SAAS,CAAC;IACxB,kBAAU,GAAG,SAAS,CAAC;IACvB,mBAAW,GAAG,QAAQ,CAAC;IACvB,wBAAgB,GAAG,iBAAiB,CAAC;;AAElD;;;;;;;;;;EAUE;;;;;;;;;;;;;;;;;ICzBF;;;oGAGgG;IAChG,YAAY,CAAC;IAqBA,gBAAQ,GACI;QACvB,YAAY,EAAE,EAAE;QAChB,YAAY,EAAE,KAAK;QAEnB,eAAe;QACf,OAAO,EAAE,wBAAwB;QACjC,UAAU,EAAE,yBAAyB;QACrC,OAAO,EAAE,gBAAgB;QAEzB,0CAA0C;QAC1C,SAAS,EAAE,6CAA6C;QAExD,uBAAuB;QACvB,KAAK,EAAE;YACN,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO;YAChD,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO;SACxD;QAED,SAAS,EAAE;YACV,IAAI,EAAE;gBAEL,mBAAmB;gBACnB,CAAC,+CAA+C,EAAE,CAAC,OAAO,EAAE,kBAAkB,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,YAAY,EAAE,kBAAkB,CAAC,YAAY,CAAC,CAAC;gBAEpK,mBAAmB;gBACnB,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,gBAAgB,CAAC;gBAEzD,qBAAqB;gBACrB,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,eAAe,CAAC;gBAE3D,QAAQ;gBACR,CAAC,QAAQ,EAAE,kBAAkB,CAAC,WAAW,CAAC;gBAE1C,mCAAmC;gBACnC,CAAC,wBAAwB,EAAE,kBAAkB,CAAC,UAAU,CAAC;gBAEzD,+BAA+B;gBAC/B,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,WAAW,CAAC;gBAEvD,uBAAuB;gBACvB,CAAC,mCAAmC,EAAE,EAAE,KAAK,EAAE,kBAAkB,CAAC,WAAW,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;gBAEpG,yDAAyD;gBACzD,CAAC,iCAAiC,EAAE,EAAE,KAAK,EAAE,kBAAkB,CAAC,WAAW,EAAE,IAAI,EAAE,cAAc,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;gBAExH,4DAA4D;gBAC5D,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,kBAAkB,CAAC,WAAW,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;gBAE/E,sBAAsB;gBACtB,EAAE,OAAO,EAAE,cAAc,EAAE;aAC3B;YAED,SAAS,EAAE;gBACV,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,kBAAkB,CAAC,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gBACzE,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,kBAAkB,CAAC,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gBACzE,CAAC,KAAK,EAAE,kBAAkB,CAAC,gBAAgB,CAAC;aAC5C;YAED,2BAA2B;YAC3B,WAAW,EAAE;gBACZ,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC;gBACrF,CAAC,QAAQ,EAAE,kBAAkB,CAAC,gBAAgB,CAAC;aAC/C;YAED,cAAc,EAAE;gBACf,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,kBAAkB,CAAC,gBAAgB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gBACxE,CAAC,GAAG,EAAE,UAAU,EAAE,MAAM,CAAC;aACzB;YAED,WAAW,EAAE;gBAEZ,UAAU;gBACV,CAAC,OAAO,EAAE,eAAe,CAAC;gBAC1B,CAAC,UAAU,EAAE,QAAQ,CAAC;gBAEtB,iBAAiB;gBACjB,CAAC,mCAAmC,EAAE,QAAQ,CAAC;gBAC/C,CAAC,qCAAqC,EAAE,QAAQ,CAAC;gBACjD,CAAC,aAAa,EAAE,UAAU,CAAC;gBAC3B,CAAC,wBAAwB,EAAE,UAAU,CAAC;gBACtC,CAAC,sBAAsB,EAAE,UAAU,CAAC;gBAEpC,QAAQ;gBACR,CAAC,WAAW,EAAE,eAAe,CAAC;gBAC9B,CAAC,6CAA6C,EAAE,CAAC,aAAa,EAAE,EAAE,EAAE,aAAa,CAAC,CAAC;gBACnF,CAAC,mCAAmC,EAAE,aAAa,CAAC;gBAEpD,UAAU;gBACV,EAAE,OAAO,EAAE,MAAM,EAAE;aACnB;YAED,+FAA+F;YAC/F,6FAA6F;YAC7F,6FAA6F;YAC7F,8FAA8F;YAC9F,oDAAoD;YACpD,IAAI,EAAE;gBACL,YAAY;gBACZ,CAAC,WAAW,EAAE,qBAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC1C,CAAC,QAAQ,EAAE;wBACV,KAAK,EAAE;4BACN,QAAQ,EAAE,EAAE,KAAK,EAAE,qBAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE;4BACjE,UAAU,EAAE,EAAE,KAAK,EAAE,qBAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;yBACrF;qBACD,CAAC;gBACF,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,qBAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;gBAE3E,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC;aAC/B;YAED,OAAO,EAAE;gBACR,CAAC,SAAS,EAAE,iBAAiB,CAAC;gBAC9B,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC;gBAC1B,CAAC,MAAM,EAAE,yBAAyB,CAAC;gBACnC,CAAC,OAAO,EAAE,iBAAiB,CAAC;aAC5B;YAED,yEAAyE;YACzE,GAAG,EAAE;gBACJ,CAAC,YAAY,EAAE,OAAO,CAAC;gBACvB,CAAC,8BAA8B,EAAE,CAAC,qBAAc,CAAC,WAAW,EAAE,qBAAc,CAAC,YAAY,EAAE,qBAAc,CAAC,YAAY;wBACrH,EAAE,KAAK,EAAE,qBAAc,CAAC,YAAY,EAAE,QAAQ,EAAE,aAAa,EAAE;wBAC/D,qBAAc,CAAC,YAAY,CAAC,CAAC;gBAC9B,CAAC,8BAA8B,EAAE,CAAC,qBAAc,CAAC,WAAW,EAAE,qBAAc,CAAC,YAAY,EAAE,qBAAc,CAAC,YAAY;wBACrH,EAAE,KAAK,EAAE,qBAAc,CAAC,YAAY,EAAE,QAAQ,EAAE,aAAa,EAAE;wBAC/D,qBAAc,CAAC,YAAY,CAAC,CAAC;gBAC9B,CAAC,iCAAiC,EAAE,CAAC,qBAAc,CAAC,WAAW,EAAE,qBAAc,CAAC,YAAY,EAAE,qBAAc,CAAC,YAAY,CAAC,CAAC;gBAC3H,CAAC,KAAK,EAAE,qBAAc,CAAC,WAAW,CAAC;gBACnC,CAAC,KAAK,EAAE,qBAAc,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC;gBAC7C,CAAC,GAAG,EAAE;wBACL,KAAK,EAAE;4BACN,YAAY,EAAE,EAAE,KAAK,EAAE,qBAAc,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,YAAY,EAAE,UAAU,EAAE;4BAC1G,aAAa,EAAE;gCACd,KAAK,EAAE;oCACN,KAAK,EAAE,EAAE,KAAK,EAAE,qBAAc,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,YAAY,EAAE,KAAK,EAAE;oCAC9F,UAAU,EAAE,EAAE,KAAK,EAAE,qBAAc,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,YAAY,EAAE,iBAAiB,EAAE;iCAC/G;6BACD;4BACD,UAAU,EAAE,EAAE,KAAK,EAAE,qBAAc,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE;yBACjE;qBACD,CAAC;aACF;YAED,QAAQ,EAAE;gBACT,CAAC,SAAS,EAAE,EAAE,CAAC;gBACf,CAAC,cAAc,EAAE;wBAChB,KAAK,EAAE;4BACN,SAAS,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE;4BACpE,UAAU,EAAE,EAAE;yBACd;qBACD,CAAC;gBACF,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;gBACrC,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;gBACrC,CAAC,GAAG,EAAE,QAAQ,EAAE,WAAW,CAAC;gBAC5B,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC;gBAC7B,CAAC,GAAG,EAAE,EAAE,CAAC;aACT;YAED,6CAA6C;YAC7C,MAAM,EAAE;gBACP,CAAC,UAAU,EAAE,QAAQ,CAAC;gBACtB,CAAC,YAAY,EAAE,eAAe,CAAC;gBAC/B,CAAC,KAAK,EAAE,uBAAuB,CAAC;gBAChC,CAAC,MAAM,EAAE;wBACR,KAAK,EAAE;4BACN,SAAS,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;4BAC5C,UAAU,EAAE,QAAQ;yBACpB;qBACD,CAAC;aACF;SACD;KACD,CAAC;IAEH;QAAkC,gCAAY;QAiB7C,sBACC,UAAiC,EACV,oBAA2C,EAClD,aAA6B,EAC/B,WAAyB,EACjB,mBAAyC,EACxC,oBAA2C;YAElE,kBAAM,UAAU,CAAC,EAAE,CAAC,CAAC;YACrB,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,EAAE,gBAAQ,CAAC,CAAC;YAErD,IAAI,CAAC,kBAAkB,GAAG,IAAI,gCAAiB,CAAgC,UAAU,EAAE,6CAA6C,EAAE,gBAAgB,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;YACxL,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YAEpC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAE1B,IAAI,CAAC,mBAAmB,GAAG,wCAAyB,CAAC,WAAW,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAE/E,6DAA6B,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC;YAE/E,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;gBAC5C,iBAAiB,EAAE,EAAE;gBACrB,wBAAwB,EAAE,KAAK;gBAC/B,sBAAsB,EAAE,UAAC,KAAK,EAAE,QAAQ,EAAE,KAAK;oBAC9C,MAAM,CAAC,6BAAqB,CAAC,KAAK,EAAE,mBAAmB,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAC9F,CAAC;aACD,EAAE,IAAI,CAAC,CAAC;QACV,CAAC;QAEO,8BAAO,GAAf,UAAmB,MAAgE;YAClF,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC;QAEM,gCAAS,GAAhB,UAAiB,OAAW;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YACxC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,EAAvB,CAAuB,CAAC,CAAC;YACrD,CAAC;QACF,CAAC;QAGO,wCAAiB,GAAzB,UAA0B,OAAW;YACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,EAAvB,CAAuB,CAAC,CAAC;QACrD,CAAC;QAGM,oCAAa,GAApB,UAAqB,QAAa,EAAE,2BAAoC;YACvE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,aAAa,CAAC,QAAQ,EAAE,2BAA2B,CAAC,EAAtD,CAAsD,CAAC,CAAC;QACpF,CAAC;QAjEa,wBAAW,GAAyB;YACjD,QAAQ,EAAE;gBACT,YAAY,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE;aAC9B;YACD,QAAQ,EAAE,CAAC,CAAC,GAAG,EAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;YACtD,gBAAgB,EAAE,EAAE;SACpB,CAAC;QAmDK,+BAAkB,GAAG,8BAAc,CAAC,YAAY,EAAE,YAAY,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAK5F,2BAAc,GAAG,6BAAa,CAAC,YAAY,EAAE,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QA7CzF;uBAAC,qCAAqB;uBACrB,uBAAc;uBACd,0BAAY;uBACZ,0CAAoB;uBACpB,qCAAqB;wBAJA;QAiDxB,mBAAC;IAAD,CApEA,AAoEC,CApEiC,2BAAY,GAoE7C;IApEY,oBAAY,eAoExB,CAAA;;;AF3QD","file":"vs/languages/markdown/common/markdown.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n\r\nexport const TOKEN_HEADER_LEAD = 'entity.name.tag';\r\nexport const TOKEN_HEADER = 'entity.name.tag';\r\nexport const TOKEN_EXT_HEADER = 'entity.other.attribute-name';\r\nexport const TOKEN_SEPARATOR = 'meta.separator';\r\nexport const TOKEN_QUOTE = 'comment';\r\nexport const TOKEN_LIST = 'keyword';\r\nexport const TOKEN_BLOCK = 'string';\r\nexport const TOKEN_BLOCK_CODE = 'variable.source';\r\n\r\n/*\r\n// old settings\r\nexport const TOKEN_HEADER_LEAD = 'white';\r\nexport const TOKEN_HEADER = 'keyword.1';\r\nexport const TOKEN_EXT_HEADER = 'keyword.header';\r\nexport const TOKEN_SEPARATOR = 'keyword.header';\r\nexport const TOKEN_QUOTE = 'comment';\r\nexport const TOKEN_LIST = 'string.list';\r\nexport const TOKEN_BLOCK = 'variable';\r\nexport const TOKEN_BLOCK_CODE = 'variable.code';\r\n*/","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n\r\nimport WinJS = require('vs/base/common/winjs.base');\r\nimport URI from 'vs/base/common/uri';\r\nimport Types = require('vs/editor/common/modes/monarch/monarchTypes');\r\nimport Compile = require('vs/editor/common/modes/monarch/monarchCompile');\r\nimport Modes = require('vs/editor/common/modes');\r\nimport MarkdownWorker = require('vs/languages/markdown/common/markdownWorker');\r\nimport {OneWorkerAttr, AllWorkersAttr} from 'vs/platform/thread/common/threadService';\r\nimport {htmlTokenTypes} from 'vs/languages/html/common/html';\r\nimport markdownTokenTypes = require('vs/languages/markdown/common/markdownTokenTypes');\r\nimport {IModeService} from 'vs/editor/common/services/modeService';\r\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\r\nimport {IThreadService} from 'vs/platform/thread/common/thread';\r\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\r\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\r\nimport {AbstractMode, ModeWorkerManager} from 'vs/editor/common/modes/abstractMode';\r\nimport {createTokenizationSupport} from 'vs/editor/common/modes/monarch/monarchLexer';\r\nimport {LanguageConfigurationRegistry, LanguageConfiguration} from 'vs/editor/common/modes/languageConfigurationRegistry';\r\nimport {wireCancellationToken} from 'vs/base/common/async';\r\n\r\nexport const language =\r\n\t<Types.IMonarchLanguage>{\r\n\t\tdefaultToken: '',\r\n\t\ttokenPostfix: '.md',\r\n\r\n\t\t// escape codes\r\n\t\tcontrol: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n\t\tnoncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n\t\tescapes: /\\\\(?:@control)/,\r\n\r\n\t\t// escape codes for javascript/CSS strings\r\n\t\tjsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\r\n\r\n\t\t// non matched elements\r\n\t\tempty: [\r\n\t\t\t'area', 'base', 'basefont', 'br', 'col', 'frame',\r\n\t\t\t'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'\r\n\t\t],\r\n\r\n\t\ttokenizer: {\r\n\t\t\troot: [\r\n\r\n\t\t\t\t// headers (with #)\r\n\t\t\t\t[/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', markdownTokenTypes.TOKEN_HEADER_LEAD, markdownTokenTypes.TOKEN_HEADER, markdownTokenTypes.TOKEN_HEADER]],\r\n\r\n\t\t\t\t// headers (with =)\r\n\t\t\t\t[/^\\s*(=+|\\-+)\\s*$/, markdownTokenTypes.TOKEN_EXT_HEADER],\r\n\r\n\t\t\t\t// headers (with ***)\r\n\t\t\t\t[/^\\s*((\\*[ ]?)+)\\s*$/, markdownTokenTypes.TOKEN_SEPARATOR],\r\n\r\n\t\t\t\t// quote\r\n\t\t\t\t[/^\\s*>+/, markdownTokenTypes.TOKEN_QUOTE],\r\n\r\n\t\t\t\t// list (starting with * or number)\r\n\t\t\t\t[/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, markdownTokenTypes.TOKEN_LIST],\r\n\r\n\t\t\t\t// code block (4 spaces indent)\r\n\t\t\t\t[/^(\\t|[ ]{4})[^ ].*$/, markdownTokenTypes.TOKEN_BLOCK],\r\n\r\n\t\t\t\t// code block (3 tilde)\r\n\t\t\t\t[/^\\s*~{3}\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@codeblock' }],\r\n\r\n\t\t\t\t// github style code blocks (with backticks and language)\r\n\t\t\t\t[/^\\s*```\\s*((?:\\w|[\\/\\-#])+)\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@codeblockgh', nextEmbedded: '$1' }],\r\n\r\n\t\t\t\t// github style code blocks (with backticks but no language)\r\n\t\t\t\t[/^\\s*`{3}\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@codeblock' }],\r\n\r\n\t\t\t\t// markup within lines\r\n\t\t\t\t{ include: '@linecontent' },\r\n\t\t\t],\r\n\r\n\t\t\tcodeblock: [\r\n\t\t\t\t[/^\\s*~{3}\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@pop' }],\r\n\t\t\t\t[/^\\s*`{3}\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@pop' }],\r\n\t\t\t\t[/.*$/, markdownTokenTypes.TOKEN_BLOCK_CODE],\r\n\t\t\t],\r\n\r\n\t\t\t// github style code blocks\r\n\t\t\tcodeblockgh: [\r\n\t\t\t\t[/```\\s*$/, { token: '@rematch', switchTo: '@codeblockghend', nextEmbedded: '@pop' }],\r\n\t\t\t\t[/[^`]*$/, markdownTokenTypes.TOKEN_BLOCK_CODE],\r\n\t\t\t],\r\n\r\n\t\t\tcodeblockghend: [\r\n\t\t\t\t[/\\s*```/, { token: markdownTokenTypes.TOKEN_BLOCK_CODE, next: '@pop' }],\r\n\t\t\t\t[/./, '@rematch', '@pop'],\r\n\t\t\t],\r\n\r\n\t\t\tlinecontent: [\r\n\r\n\t\t\t\t// escapes\r\n\t\t\t\t[/&\\w+;/, 'string.escape'],\r\n\t\t\t\t[/@escapes/, 'escape'],\r\n\r\n\t\t\t\t// various markup\r\n\t\t\t\t[/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\r\n\t\t\t\t[/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\r\n\t\t\t\t[/\\b_[^_]+_\\b/, 'emphasis'],\r\n\t\t\t\t[/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\r\n\t\t\t\t[/`([^\\\\`]|@escapes)+`/, 'variable'],\r\n\r\n\t\t\t\t// links\r\n\t\t\t\t[/\\{[^}]+\\}/, 'string.target'],\r\n\t\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\r\n\t\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\r\n\r\n\t\t\t\t// or html\r\n\t\t\t\t{ include: 'html' },\r\n\t\t\t],\r\n\r\n\t\t\t// Note: it is tempting to rather switch to the real HTML mode instead of building our own here\r\n\t\t\t// but currently there is a limitation in Monarch that prevents us from doing it: The opening\r\n\t\t\t// '<' would start the HTML mode, however there is no way to jump 1 character back to let the\r\n\t\t\t// HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\r\n\t\t\t// we cannot correctly tokenize it in that mode yet.\r\n\t\t\thtml: [\r\n\t\t\t\t// html tags\r\n\t\t\t\t[/<(\\w+)\\/>/, htmlTokenTypes.getTag('$1')],\r\n\t\t\t\t[/<(\\w+)/, {\r\n\t\t\t\t\tcases: {\r\n\t\t\t\t\t\t'@empty': { token: htmlTokenTypes.getTag('$1'), next: '@tag.$1' },\r\n\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$1'), bracket: '@open', next: '@tag.$1' }\r\n\t\t\t\t\t}\r\n\t\t\t\t}],\r\n\t\t\t\t[/<\\/(\\w+)\\s*>/, { token: htmlTokenTypes.getTag('$1'), bracket: '@close' }],\r\n\r\n\t\t\t\t[/<!--/, 'comment', '@comment']\r\n\t\t\t],\r\n\r\n\t\t\tcomment: [\r\n\t\t\t\t[/[^<\\-]+/, 'comment.content'],\r\n\t\t\t\t[/-->/, 'comment', '@pop'],\r\n\t\t\t\t[/<!--/, 'comment.content.invalid'],\r\n\t\t\t\t[/[<\\-]/, 'comment.content']\r\n\t\t\t],\r\n\r\n\t\t\t// Almost full HTML tag matching, complete with embedded scripts & styles\r\n\t\t\ttag: [\r\n\t\t\t\t[/[ \\t\\r\\n]+/, 'white'],\r\n\t\t\t\t[/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE,\r\n\t\t\t\t\t{ token: htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\r\n\t\t\t\t\thtmlTokenTypes.ATTRIB_VALUE]],\r\n\t\t\t\t[/(type)(\\s*=\\s*)(')([^']+)(')/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE,\r\n\t\t\t\t\t{ token: htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\r\n\t\t\t\t\thtmlTokenTypes.ATTRIB_VALUE]],\r\n\t\t\t\t[/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE]],\r\n\t\t\t\t[/\\w+/, htmlTokenTypes.ATTRIB_NAME],\r\n\t\t\t\t[/\\/>/, htmlTokenTypes.getTag('$S2'), '@pop'],\r\n\t\t\t\t[/>/, {\r\n\t\t\t\t\tcases: {\r\n\t\t\t\t\t\t'$S2==style': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/css' },\r\n\t\t\t\t\t\t'$S2==script': {\r\n\t\t\t\t\t\t\tcases: {\r\n\t\t\t\t\t\t\t\t'$S3': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: '$S3' },\r\n\t\t\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/javascript' }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$S2'), next: '@pop' }\r\n\t\t\t\t\t}\r\n\t\t\t\t}],\r\n\t\t\t],\r\n\r\n\t\t\tembedded: [\r\n\t\t\t\t[/[^\"'<]+/, ''],\r\n\t\t\t\t[/<\\/(\\w+)\\s*>/, {\r\n\t\t\t\t\tcases: {\r\n\t\t\t\t\t\t'$1==$S2': { token: '@rematch', next: '@pop', nextEmbedded: '@pop' },\r\n\t\t\t\t\t\t'@default': ''\r\n\t\t\t\t\t}\r\n\t\t\t\t}],\r\n\t\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],  // non-teminated string\r\n\t\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],  // non-teminated string\r\n\t\t\t\t[/\"/, 'string', '@string.\"'],\r\n\t\t\t\t[/'/, 'string', '@string.\\''],\r\n\t\t\t\t[/</, '']\r\n\t\t\t],\r\n\r\n\t\t\t// scan embedded strings in javascript or css\r\n\t\t\tstring: [\r\n\t\t\t\t[/[^\\\\\"']+/, 'string'],\r\n\t\t\t\t[/@jsescapes/, 'string.escape'],\r\n\t\t\t\t[/\\\\./, 'string.escape.invalid'],\r\n\t\t\t\t[/[\"']/, {\r\n\t\t\t\t\tcases: {\r\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\r\n\t\t\t\t\t\t'@default': 'string'\r\n\t\t\t\t\t}\r\n\t\t\t\t}]\r\n\t\t\t]\r\n\t\t}\r\n\t};\r\n\r\nexport class MarkdownMode extends AbstractMode implements Modes.IEmitOutputSupport {\r\n\r\n\tpublic static LANG_CONFIG:LanguageConfiguration = {\r\n\t\tcomments: {\r\n\t\t\tblockComment: ['<!--', '-->',]\r\n\t\t},\r\n\t\tbrackets: [['{','}'], ['[',']'], ['(',')'], ['<','>']],\r\n\t\tautoClosingPairs: []\r\n\t};\r\n\r\n\tpublic emitOutputSupport: Modes.IEmitOutputSupport;\r\n\tpublic configSupport:Modes.IConfigurationSupport;\r\n\tpublic tokenizationSupport: Modes.ITokenizationSupport;\r\n\r\n\tprivate _modeWorkerManager: ModeWorkerManager<MarkdownWorker.MarkdownWorker>;\r\n\tprivate _threadService:IThreadService;\r\n\r\n\tconstructor(\r\n\t\tdescriptor: Modes.IModeDescriptor,\r\n\t\t@IInstantiationService instantiationService: IInstantiationService,\r\n\t\t@IThreadService threadService: IThreadService,\r\n\t\t@IModeService modeService: IModeService,\r\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService,\r\n\t\t@IConfigurationService configurationService: IConfigurationService\r\n\t) {\r\n\t\tsuper(descriptor.id);\r\n\t\tlet lexer = Compile.compile(descriptor.id, language);\r\n\r\n\t\tthis._modeWorkerManager = new ModeWorkerManager<MarkdownWorker.MarkdownWorker>(descriptor, 'vs/languages/markdown/common/markdownWorker', 'MarkdownWorker', null, instantiationService);\r\n\t\tthis._threadService = threadService;\r\n\r\n\t\tthis.emitOutputSupport = this;\r\n\t\tthis.configSupport = this;\r\n\r\n\t\tthis.tokenizationSupport = createTokenizationSupport(modeService, this, lexer);\r\n\r\n\t\tLanguageConfigurationRegistry.register(this.getId(), MarkdownMode.LANG_CONFIG);\r\n\r\n\t\tModes.SuggestRegistry.register(this.getId(), {\r\n\t\t\ttriggerCharacters: [],\r\n\t\t\tshouldAutotriggerSuggest: false,\r\n\t\t\tprovideCompletionItems: (model, position, token) => {\r\n\t\t\t\treturn wireCancellationToken(token, editorWorkerService.textualSuggest(model.uri, position));\r\n\t\t\t}\r\n\t\t}, true);\r\n\t}\r\n\r\n\tprivate _worker<T>(runner:(worker:MarkdownWorker.MarkdownWorker)=>WinJS.TPromise<T>): WinJS.TPromise<T> {\r\n\t\treturn this._modeWorkerManager.worker(runner);\r\n\t}\r\n\r\n\tpublic configure(options:any): WinJS.TPromise<void> {\r\n\t\tif (this._threadService.isInMainThread) {\r\n\t\t\treturn this._configureWorkers(options);\r\n\t\t} else {\r\n\t\t\treturn this._worker((w) => w._doConfigure(options));\r\n\t\t}\r\n\t}\r\n\r\n\tstatic $_configureWorkers = AllWorkersAttr(MarkdownMode, MarkdownMode.prototype._configureWorkers);\r\n\tprivate _configureWorkers(options:any): WinJS.TPromise<void> {\r\n\t\treturn this._worker((w) => w._doConfigure(options));\r\n\t}\r\n\r\n\tstatic $getEmitOutput = OneWorkerAttr(MarkdownMode, MarkdownMode.prototype.getEmitOutput);\r\n\tpublic getEmitOutput(resource: URI, absoluteWorkerResourcesPath?: string): WinJS.TPromise<Modes.IEmitOutput> { // TODO@Ben technical debt: worker cannot resolve paths absolute\r\n\t\treturn this._worker((w) => w.getEmitOutput(resource, absoluteWorkerResourcesPath));\r\n\t}\r\n}\r\n"]}